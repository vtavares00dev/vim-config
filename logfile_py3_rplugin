2018-01-06 22:10:10,573 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 1, b'vim_get_api_info', ()]
2018-01-06 22:10:10,573 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x01\xb0vim_get_api_info\x90''
2018-01-06 22:10:10,574 [DEBUG @ base.py:run:138] 11751 - Entering event loop
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [0, 1, b'poll', []]
2018-01-06 22:10:10,574 [DEBUG @ async_session.py:_on_request:86] 11751 - received request: b'poll', []
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,574 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 1, None, [2, {b'version': {b'major': 0, b'minor': 2, b'patch': 2, b'api_level': 3, b'api_compatible': 0, b'api_prerelease': False}, b'functions': [{b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_line_count', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'buffer_get_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index'], [b'String', b'line']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_del_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end']], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'buffer_get_line_slice', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True, b'return_type': b'ArrayOf(String)', b'name': b'nvim_buf_get_lines', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end'], [b'ArrayOf(String)', b'replacement']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_line_slice', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_lines', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_buf_get_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_get_changedtick', b'since': 2}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'mode']], b'method': True, b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_buf_get_keymap', b'since': 3}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_del_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_set_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_del_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_buf_get_option', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_option', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 2, b'return_type': b'Integer', b'name': b'nvim_buf_get_number', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'String', b'name': b'nvim_buf_get_name', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_name', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_buf_is_valid', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'lnum'], [b'ArrayOf(String)', b'lines']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_insert', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_buf_get_mark', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_add_highlight', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_clear_highlight', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'ArrayOf(Window)', b'name': b'nvim_tabpage_list_wins', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_tabpage_get_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_tabpage_set_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_tabpage_del_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_set_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_del_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Window', b'name': b'nvim_tabpage_get_win', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_tabpage_get_number', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_tabpage_is_valid', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Dictionary', b'options']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_attach', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Boolean', b'enable_rgb']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'ui_attach', b'since': 0}, {b'parameters': [], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_detach', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_try_resize', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_set_option', b'since': 1}, {b'parameters': [[b'String', b'command']], b'method': False, b'return_type': b'void', b'name': b'nvim_command', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Boolean', b'rgb']], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_name', b'since': 3}, {b'parameters': [[b'Integer', b'hl_id'], [b'Boolean', b'rgb']], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_id', b'since': 3}, {b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False, b'return_type': b'void', b'name': b'nvim_feedkeys', b'since': 1}, {b'parameters': [[b'String', b'keys']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_input', b'since': 1}, {b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False, b'return_type': b'String', b'name': b'nvim_replace_termcodes', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'String', b'name': b'nvim_command_output', b'since': 1}, {b'parameters': [[b'String', b'expr']], b'method': False, b'return_type': b'Object', b'name': b'nvim_eval', b'since': 1}, {b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False, b'return_type': b'Object', b'name': b'nvim_call_function', b'since': 1}, {b'parameters': [[b'String', b'code'], [b'Array', b'args']], b'method': False, b'return_type': b'Object', b'name': b'nvim_execute_lua', b'since': 3}, {b'parameters': [[b'String', b'text']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_strwidth', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(String)', b'name': b'nvim_list_runtime_paths', b'since': 1}, {b'parameters': [[b'String', b'dir']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_dir', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'String', b'name': b'nvim_get_current_line', b'since': 1}, {b'parameters': [[b'String', b'line']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_line', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'void', b'name': b'nvim_del_current_line', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_var', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_var', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'void', b'name': b'nvim_del_var', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_set_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_del_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_vvar', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_option', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_option', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_out_write', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_err_write', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_err_writeln', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Buffer)', b'name': b'nvim_list_bufs', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Buffer', b'name': b'nvim_get_current_buf', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_buf', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Window)', b'name': b'nvim_list_wins', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Window', b'name': b'nvim_get_current_win', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_win', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Tabpage)', b'name': b'nvim_list_tabpages', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Tabpage', b'name': b'nvim_get_current_tabpage', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_tabpage', b'since': 1}, {b'parameters': [[b'String', b'event']], b'method': False, b'return_type': b'void', b'name': b'nvim_subscribe', b'since': 1}, {b'parameters': [[b'String', b'event']], b'method': False, b'return_type': b'void', b'name': b'nvim_unsubscribe', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_get_color_by_name', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_color_map', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_mode', b'since': 2}, {b'parameters': [[b'String', b'mode']], b'method': False, b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_get_keymap', b'since': 3}, {b'parameters': [], b'method': False, b'return_type': b'Array', b'name': b'nvim_get_api_info', b'since': 1}, {b'parameters': [[b'Array', b'calls']], b'method': False, b'return_type': b'Array', b'name': b'nvim_call_atomic', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Buffer', b'name': b'nvim_win_get_buf', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_cursor', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_cursor', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_height', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_height', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_width', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_width', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_win_get_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_del_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_set_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_del_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_win_get_option', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_option', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_position', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Tabpage', b'name': b'nvim_win_get_tabpage', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_number', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_win_is_valid', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_line_count', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'buffer_get_lines', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_lines', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_get_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_get_option', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_option', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_get_number', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'String', b'name': b'buffer_get_name', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_name', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'buffer_is_valid', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'buffer_get_mark', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_add_highlight', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_clear_highlight', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Window)', b'name': b'tabpage_get_windows', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_get_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'Window', b'name': b'tabpage_get_window', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'tabpage_is_valid', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'ui_detach', b'since': 0}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'ui_try_resize', b'since': 0}, {b'parameters': [[b'String', b'command']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_command', b'since': 0}, {b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_feedkeys', b'since': 0}, {b'parameters': [[b'String', b'keys']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_input', b'since': 0}, {b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_replace_termcodes', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_command_output', b'since': 0}, {b'parameters': [[b'String', b'expr']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_eval', b'since': 0}, {b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_call_function', b'since': 0}, {b'parameters': [[b'String', b'text']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_strwidth', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'vim_list_runtime_paths', b'since': 0}, {b'parameters': [[b'String', b'dir']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_change_directory', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_get_current_line', b'since': 0}, {b'parameters': [[b'String', b'line']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_line', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_del_current_line', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_vvar', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_option', b'since': 0}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_option', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_out_write', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_err_write', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_report_error', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Buffer)', b'name': b'vim_get_buffers', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Buffer', b'name': b'vim_get_current_buffer', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_buffer', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Window)', b'name': b'vim_get_windows', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Window', b'name': b'vim_get_current_window', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_window', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Tabpage)', b'name': b'vim_get_tabpages', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Tabpage', b'name': b'vim_get_current_tabpage', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_tabpage', b'since': 0}, {b'parameters': [[b'String', b'event']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_subscribe', b'since': 0}, {b'parameters': [[b'String', b'event']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_unsubscribe', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_name_to_color', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Dictionary', b'name': b'vim_get_color_map', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Array', b'name': b'vim_get_api_info', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Buffer', b'name': b'window_get_buffer', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'window_get_cursor', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_cursor', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'window_get_height', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_height', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'window_get_width', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_width', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_get_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_get_option', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_option', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'window_get_position', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Tabpage', b'name': b'window_get_tabpage', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'window_is_valid', b'since': 0}], b'ui_events': [{b'parameters': [[b'Integer', b'rows'], [b'Integer', b'columns']], b'name': b'resize', b'since': 3}, {b'parameters': [], b'name': b'clear', b'since': 3}, {b'parameters': [], b'name': b'eol_clear', b'since': 3}, {b'parameters': [[b'Integer', b'row'], [b'Integer', b'col']], b'name': b'cursor_goto', b'since': 3}, {b'parameters': [[b'Boolean', b'enabled'], [b'Array', b'cursor_styles']], b'name': b'mode_info_set', b'since': 3}, {b'parameters': [], b'name': b'update_menu', b'since': 3}, {b'parameters': [], b'name': b'busy_start', b'since': 3}, {b'parameters': [], b'name': b'busy_stop', b'since': 3}, {b'parameters': [], b'name': b'mouse_on', b'since': 3}, {b'parameters': [], b'name': b'mouse_off', b'since': 3}, {b'parameters': [[b'String', b'mode'], [b'Integer', b'mode_idx']], b'name': b'mode_change', b'since': 3}, {b'parameters': [[b'Integer', b'top'], [b'Integer', b'bot'], [b'Integer', b'left'], [b'Integer', b'right']], b'name': b'set_scroll_region', b'since': 3}, {b'parameters': [[b'Integer', b'count']], b'name': b'scroll', b'since': 3}, {b'parameters': [[b'Dictionary', b'attrs']], b'name': b'highlight_set', b'since': 3}, {b'parameters': [[b'String', b'str']], b'name': b'put', b'since': 3}, {b'parameters': [], b'name': b'bell', b'since': 3}, {b'parameters': [], b'name': b'visual_bell', b'since': 3}, {b'parameters': [], b'name': b'flush', b'since': 3}, {b'parameters': [[b'Integer', b'fg']], b'name': b'update_fg', b'since': 3}, {b'parameters': [[b'Integer', b'bg']], b'name': b'update_bg', b'since': 3}, {b'parameters': [[b'Integer', b'sp']], b'name': b'update_sp', b'since': 3}, {b'parameters': [], b'name': b'suspend', b'since': 3}, {b'parameters': [[b'String', b'title']], b'name': b'set_title', b'since': 3}, {b'parameters': [[b'String', b'icon']], b'name': b'set_icon', b'since': 3}, {b'parameters': [[b'Array', b'items'], [b'Integer', b'selected'], [b'Integer', b'row'], [b'Integer', b'col']], b'name': b'popupmenu_show', b'since': 3}, {b'parameters': [], b'name': b'popupmenu_hide', b'since': 3}, {b'parameters': [[b'Integer', b'selected']], b'name': b'popupmenu_select', b'since': 3}, {b'parameters': [[b'Tabpage', b'current'], [b'Array', b'tabs']], b'name': b'tabline_update', b'since': 3}, {b'parameters': [[b'Array', b'content'], [b'Integer', b'pos'], [b'String', b'firstc'], [b'String', b'prompt'], [b'Integer', b'indent'], [b'Integer', b'level']], b'name': b'cmdline_show', b'since': 3}, {b'parameters': [[b'Integer', b'pos'], [b'Integer', b'level']], b'name': b'cmdline_pos', b'since': 3}, {b'parameters': [[b'String', b'c'], [b'Boolean', b'shift'], [b'Integer', b'level']], b'name': b'cmdline_special_char', b'since': 3}, {b'parameters': [[b'Integer', b'level']], b'name': b'cmdline_hide', b'since': 3}, {b'parameters': [[b'Array', b'lines']], b'name': b'cmdline_block_show', b'since': 3}, {b'parameters': [[b'Array', b'lines']], b'name': b'cmdline_block_append', b'since': 3}, {b'parameters': [], b'name': b'cmdline_block_hide', b'since': 3}, {b'parameters': [[b'Array', b'items']], b'name': b'wildmenu_show', b'since': 3}, {b'parameters': [[b'Integer', b'selected']], b'name': b'wildmenu_select', b'since': 3}, {b'parameters': [], b'name': b'wildmenu_hide', b'since': 3}], b'error_types': {b'Exception': {b'id': 0}, b'Validation': {b'id': 1}}, b'types': {b'Buffer': {b'id': 0, b'prefix': b'nvim_buf_'}, b'Window': {b'id': 1, b'prefix': b'nvim_win_'}, b'Tabpage': {b'id': 2, b'prefix': b'nvim_tabpage_'}}}]]
2018-01-06 22:10:10,575 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, [2, {b'version': {b'major': 0, b'minor': 2, b'patch': 2, b'api_level': 3, b'api_compatible': 0, b'api_prerelease': False}, b'functions': [{b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_line_count', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'buffer_get_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index'], [b'String', b'line']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'index']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_del_line', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end']], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'buffer_get_line_slice', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True, b'return_type': b'ArrayOf(String)', b'name': b'nvim_buf_get_lines', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'include_start'], [b'Boolean', b'include_end'], [b'ArrayOf(String)', b'replacement']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_line_slice', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_lines', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_buf_get_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_get_changedtick', b'since': 2}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'mode']], b'method': True, b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_buf_get_keymap', b'since': 3}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_del_var', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_set_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_del_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_buf_get_option', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_option', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 2, b'return_type': b'Integer', b'name': b'nvim_buf_get_number', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'String', b'name': b'nvim_buf_get_name', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_set_name', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_buf_is_valid', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'lnum'], [b'ArrayOf(String)', b'lines']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_insert', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_buf_get_mark', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_buf_add_highlight', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True, b'return_type': b'void', b'name': b'nvim_buf_clear_highlight', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'ArrayOf(Window)', b'name': b'nvim_tabpage_list_wins', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_tabpage_get_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_tabpage_set_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_tabpage_del_var', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_set_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_del_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Window', b'name': b'nvim_tabpage_get_win', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_tabpage_get_number', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_tabpage_is_valid', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Dictionary', b'options']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_attach', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height'], [b'Boolean', b'enable_rgb']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'ui_attach', b'since': 0}, {b'parameters': [], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_detach', b'since': 1}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_try_resize', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_ui_set_option', b'since': 1}, {b'parameters': [[b'String', b'command']], b'method': False, b'return_type': b'void', b'name': b'nvim_command', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Boolean', b'rgb']], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_name', b'since': 3}, {b'parameters': [[b'Integer', b'hl_id'], [b'Boolean', b'rgb']], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_hl_by_id', b'since': 3}, {b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False, b'return_type': b'void', b'name': b'nvim_feedkeys', b'since': 1}, {b'parameters': [[b'String', b'keys']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_input', b'since': 1}, {b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False, b'return_type': b'String', b'name': b'nvim_replace_termcodes', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'String', b'name': b'nvim_command_output', b'since': 1}, {b'parameters': [[b'String', b'expr']], b'method': False, b'return_type': b'Object', b'name': b'nvim_eval', b'since': 1}, {b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False, b'return_type': b'Object', b'name': b'nvim_call_function', b'since': 1}, {b'parameters': [[b'String', b'code'], [b'Array', b'args']], b'method': False, b'return_type': b'Object', b'name': b'nvim_execute_lua', b'since': 3}, {b'parameters': [[b'String', b'text']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_strwidth', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(String)', b'name': b'nvim_list_runtime_paths', b'since': 1}, {b'parameters': [[b'String', b'dir']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_dir', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'String', b'name': b'nvim_get_current_line', b'since': 1}, {b'parameters': [[b'String', b'line']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_line', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'void', b'name': b'nvim_del_current_line', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_var', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_var', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'void', b'name': b'nvim_del_var', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_set_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_del_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_vvar', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Object', b'name': b'nvim_get_option', b'since': 1}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_option', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_out_write', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_err_write', b'since': 1}, {b'parameters': [[b'String', b'str']], b'method': False, b'return_type': b'void', b'name': b'nvim_err_writeln', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Buffer)', b'name': b'nvim_list_bufs', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Buffer', b'name': b'nvim_get_current_buf', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_buf', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Window)', b'name': b'nvim_list_wins', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Window', b'name': b'nvim_get_current_win', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_win', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'ArrayOf(Tabpage)', b'name': b'nvim_list_tabpages', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Tabpage', b'name': b'nvim_get_current_tabpage', b'since': 1}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': False, b'return_type': b'void', b'name': b'nvim_set_current_tabpage', b'since': 1}, {b'parameters': [[b'String', b'event']], b'method': False, b'return_type': b'void', b'name': b'nvim_subscribe', b'since': 1}, {b'parameters': [[b'String', b'event']], b'method': False, b'return_type': b'void', b'name': b'nvim_unsubscribe', b'since': 1}, {b'parameters': [[b'String', b'name']], b'method': False, b'return_type': b'Integer', b'name': b'nvim_get_color_by_name', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_color_map', b'since': 1}, {b'parameters': [], b'method': False, b'return_type': b'Dictionary', b'name': b'nvim_get_mode', b'since': 2}, {b'parameters': [[b'String', b'mode']], b'method': False, b'return_type': b'ArrayOf(Dictionary)', b'name': b'nvim_get_keymap', b'since': 3}, {b'parameters': [], b'method': False, b'return_type': b'Array', b'name': b'nvim_get_api_info', b'since': 1}, {b'parameters': [[b'Array', b'calls']], b'method': False, b'return_type': b'Array', b'name': b'nvim_call_atomic', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Buffer', b'name': b'nvim_win_get_buf', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_cursor', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_cursor', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_height', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_height', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_width', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_width', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_win_get_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_del_var', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_set_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_del_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'return_type': b'Object', b'name': b'nvim_win_get_option', b'since': 1}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'return_type': b'void', b'name': b'nvim_win_set_option', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'nvim_win_get_position', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Tabpage', b'name': b'nvim_win_get_tabpage', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Integer', b'name': b'nvim_win_get_number', b'since': 1}, {b'parameters': [[b'Window', b'window']], b'method': True, b'return_type': b'Boolean', b'name': b'nvim_win_is_valid', b'since': 1}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_line_count', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'buffer_get_lines', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'start'], [b'Integer', b'end'], [b'Boolean', b'strict_indexing'], [b'ArrayOf(String)', b'replacement']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_lines', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_get_var', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'buffer_get_option', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_option', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_get_number', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'String', b'name': b'buffer_get_name', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_set_name', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'buffer_is_valid', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'buffer_get_mark', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'String', b'hl_group'], [b'Integer', b'line'], [b'Integer', b'col_start'], [b'Integer', b'col_end']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'buffer_add_highlight', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer'], [b'Integer', b'src_id'], [b'Integer', b'line_start'], [b'Integer', b'line_end']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'buffer_clear_highlight', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Window)', b'name': b'tabpage_get_windows', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'tabpage_get_var', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'Window', b'name': b'tabpage_get_window', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'tabpage_is_valid', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'ui_detach', b'since': 0}, {b'parameters': [[b'Integer', b'width'], [b'Integer', b'height']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'ui_try_resize', b'since': 0}, {b'parameters': [[b'String', b'command']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_command', b'since': 0}, {b'parameters': [[b'String', b'keys'], [b'String', b'mode'], [b'Boolean', b'escape_csi']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_feedkeys', b'since': 0}, {b'parameters': [[b'String', b'keys']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_input', b'since': 0}, {b'parameters': [[b'String', b'str'], [b'Boolean', b'from_part'], [b'Boolean', b'do_lt'], [b'Boolean', b'special']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_replace_termcodes', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_command_output', b'since': 0}, {b'parameters': [[b'String', b'expr']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_eval', b'since': 0}, {b'parameters': [[b'String', b'fname'], [b'Array', b'args']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_call_function', b'since': 0}, {b'parameters': [[b'String', b'text']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_strwidth', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(String)', b'name': b'vim_list_runtime_paths', b'since': 0}, {b'parameters': [[b'String', b'dir']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_change_directory', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'String', b'name': b'vim_get_current_line', b'since': 0}, {b'parameters': [[b'String', b'line']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_line', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_del_current_line', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_var', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_vvar', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'vim_get_option', b'since': 0}, {b'parameters': [[b'String', b'name'], [b'Object', b'value']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_option', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_out_write', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_err_write', b'since': 0}, {b'parameters': [[b'String', b'str']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_report_error', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Buffer)', b'name': b'vim_get_buffers', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Buffer', b'name': b'vim_get_current_buffer', b'since': 0}, {b'parameters': [[b'Buffer', b'buffer']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_buffer', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Window)', b'name': b'vim_get_windows', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Window', b'name': b'vim_get_current_window', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_window', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'ArrayOf(Tabpage)', b'name': b'vim_get_tabpages', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Tabpage', b'name': b'vim_get_current_tabpage', b'since': 0}, {b'parameters': [[b'Tabpage', b'tabpage']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_set_current_tabpage', b'since': 0}, {b'parameters': [[b'String', b'event']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_subscribe', b'since': 0}, {b'parameters': [[b'String', b'event']], b'method': False, b'deprecated_since': 1, b'return_type': b'void', b'name': b'vim_unsubscribe', b'since': 0}, {b'parameters': [[b'String', b'name']], b'method': False, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'vim_name_to_color', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Dictionary', b'name': b'vim_get_color_map', b'since': 0}, {b'parameters': [], b'method': False, b'deprecated_since': 1, b'return_type': b'Array', b'name': b'vim_get_api_info', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Buffer', b'name': b'window_get_buffer', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'window_get_cursor', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'ArrayOf(Integer, 2)', b'pos']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_cursor', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'window_get_height', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'height']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_height', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Integer', b'name': b'window_get_width', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'Integer', b'width']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_width', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_get_var', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name']], b'method': True, b'deprecated_since': 1, b'return_type': b'Object', b'name': b'window_get_option', b'since': 0}, {b'parameters': [[b'Window', b'window'], [b'String', b'name'], [b'Object', b'value']], b'method': True, b'deprecated_since': 1, b'return_type': b'void', b'name': b'window_set_option', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'ArrayOf(Integer, 2)', b'name': b'window_get_position', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Tabpage', b'name': b'window_get_tabpage', b'since': 0}, {b'parameters': [[b'Window', b'window']], b'method': True, b'deprecated_since': 1, b'return_type': b'Boolean', b'name': b'window_is_valid', b'since': 0}], b'ui_events': [{b'parameters': [[b'Integer', b'rows'], [b'Integer', b'columns']], b'name': b'resize', b'since': 3}, {b'parameters': [], b'name': b'clear', b'since': 3}, {b'parameters': [], b'name': b'eol_clear', b'since': 3}, {b'parameters': [[b'Integer', b'row'], [b'Integer', b'col']], b'name': b'cursor_goto', b'since': 3}, {b'parameters': [[b'Boolean', b'enabled'], [b'Array', b'cursor_styles']], b'name': b'mode_info_set', b'since': 3}, {b'parameters': [], b'name': b'update_menu', b'since': 3}, {b'parameters': [], b'name': b'busy_start', b'since': 3}, {b'parameters': [], b'name': b'busy_stop', b'since': 3}, {b'parameters': [], b'name': b'mouse_on', b'since': 3}, {b'parameters': [], b'name': b'mouse_off', b'since': 3}, {b'parameters': [[b'String', b'mode'], [b'Integer', b'mode_idx']], b'name': b'mode_change', b'since': 3}, {b'parameters': [[b'Integer', b'top'], [b'Integer', b'bot'], [b'Integer', b'left'], [b'Integer', b'right']], b'name': b'set_scroll_region', b'since': 3}, {b'parameters': [[b'Integer', b'count']], b'name': b'scroll', b'since': 3}, {b'parameters': [[b'Dictionary', b'attrs']], b'name': b'highlight_set', b'since': 3}, {b'parameters': [[b'String', b'str']], b'name': b'put', b'since': 3}, {b'parameters': [], b'name': b'bell', b'since': 3}, {b'parameters': [], b'name': b'visual_bell', b'since': 3}, {b'parameters': [], b'name': b'flush', b'since': 3}, {b'parameters': [[b'Integer', b'fg']], b'name': b'update_fg', b'since': 3}, {b'parameters': [[b'Integer', b'bg']], b'name': b'update_bg', b'since': 3}, {b'parameters': [[b'Integer', b'sp']], b'name': b'update_sp', b'since': 3}, {b'parameters': [], b'name': b'suspend', b'since': 3}, {b'parameters': [[b'String', b'title']], b'name': b'set_title', b'since': 3}, {b'parameters': [[b'String', b'icon']], b'name': b'set_icon', b'since': 3}, {b'parameters': [[b'Array', b'items'], [b'Integer', b'selected'], [b'Integer', b'row'], [b'Integer', b'col']], b'name': b'popupmenu_show', b'since': 3}, {b'parameters': [], b'name': b'popupmenu_hide', b'since': 3}, {b'parameters': [[b'Integer', b'selected']], b'name': b'popupmenu_select', b'since': 3}, {b'parameters': [[b'Tabpage', b'current'], [b'Array', b'tabs']], b'name': b'tabline_update', b'since': 3}, {b'parameters': [[b'Array', b'content'], [b'Integer', b'pos'], [b'String', b'firstc'], [b'String', b'prompt'], [b'Integer', b'indent'], [b'Integer', b'level']], b'name': b'cmdline_show', b'since': 3}, {b'parameters': [[b'Integer', b'pos'], [b'Integer', b'level']], b'name': b'cmdline_pos', b'since': 3}, {b'parameters': [[b'String', b'c'], [b'Boolean', b'shift'], [b'Integer', b'level']], b'name': b'cmdline_special_char', b'since': 3}, {b'parameters': [[b'Integer', b'level']], b'name': b'cmdline_hide', b'since': 3}, {b'parameters': [[b'Array', b'lines']], b'name': b'cmdline_block_show', b'since': 3}, {b'parameters': [[b'Array', b'lines']], b'name': b'cmdline_block_append', b'since': 3}, {b'parameters': [], b'name': b'cmdline_block_hide', b'since': 3}, {b'parameters': [[b'Array', b'items']], b'name': b'wildmenu_show', b'since': 3}, {b'parameters': [[b'Integer', b'selected']], b'name': b'wildmenu_select', b'since': 3}, {b'parameters': [], b'name': b'wildmenu_hide', b'since': 3}], b'error_types': {b'Exception': {b'id': 0}, b'Validation': {b'id': 1}}, b'types': {b'Buffer': {b'id': 0, b'prefix': b'nvim_buf_'}, b'Window': {b'id': 1, b'prefix': b'nvim_win_'}, b'Tabpage': {b'id': 2, b'prefix': b'nvim_tabpage_'}}}]
2018-01-06 22:10:10,575 [DEBUG @ base.py:stop:149] 11751 - Stopped event loop
2018-01-06 22:10:10,576 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,576 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,576 [DEBUG @ base.py:run:140] 11751 - Exited event loop
2018-01-06 22:10:10,582 [DEBUG @ session.py:_on_request:200] 11751 - received rpc request, greenlet <greenlet.greenlet object at 0x7f563c0c6930> will handle it
2018-01-06 22:10:10,583 [DEBUG @ host.py:_on_request:90] 11751 - calling request handler for "poll", args: "[]"
2018-01-06 22:10:10,583 [DEBUG @ host.py:_on_request:92] 11751 - request handler for 'poll []' returns: ok
2018-01-06 22:10:10,583 [DEBUG @ session.py:handler:186] 11751 - greenlet <greenlet.greenlet object at 0x7f563c0c6930> finished executing, sending ok as response
2018-01-06 22:10:10,583 [DEBUG @ async_session.py:send:133] 11751 - sending response to request 1: [1, 1, None, 'ok']
2018-01-06 22:10:10,583 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [1, 1, None, 'ok']
2018-01-06 22:10:10,583 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x01\x01\xc0\xa2ok''
2018-01-06 22:10:10,584 [DEBUG @ session.py:handler:196] 11751 - greenlet <greenlet.greenlet object at 0x7f563c0c6930> is now dying...
2018-01-06 22:10:10,584 [DEBUG @ base.py:run:138] 11751 - Entering event loop
2018-01-06 22:10:10,584 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,584 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [2, b'/home/vt/.config/nvim/plugged/deoplete.nvim/rplugin/python3/deoplete:function:_deoplete_init', [[]]]
2018-01-06 22:10:10,585 [DEBUG @ async_session.py:_on_notification:102] 11751 - received notification: b'/home/vt/.config/nvim/plugged/deoplete.nvim/rplugin/python3/deoplete:function:_deoplete_init', [[]]
2018-01-06 22:10:10,585 [DEBUG @ session.py:_on_notification:215] 11751 - received rpc notification, greenlet <greenlet.greenlet object at 0x7f563c0c6930> will handle it
2018-01-06 22:10:10,585 [DEBUG @ host.py:_on_notification:106] 11751 - calling notification handler for "/home/vt/.config/nvim/plugged/deoplete.nvim/rplugin/python3/deoplete:function:_deoplete_init", args: "[[]]"
2018-01-06 22:10:10,585 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 2, 'nvim_call_function', ('deoplete#init#_context', ['Init', []])]
2018-01-06 22:10:10,585 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x02\xb2nvim_call_function\x92\xb6deoplete#init#_context\x92\xa4Init\x90''
2018-01-06 22:10:10,585 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,585 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,585 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,608 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,609 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 2, None, {b'max_menu_width': 42, b'cwd': b'/home/vt/.vim', b'vars': {b'deoplete#sources#go#align_class': 0, b'deoplete#auto_complete_delay': 50, b'deoplete#max_abbr_width': 80, b'deoplete#enable_yarp': 0, b'deoplete#omni#input_patterns': {}, b'deoplete#auto_refresh_delay': 500, b'deoplete#sources#go#package_dot': 0, b'deoplete#omni_patterns': {}, b'deoplete#enable_refresh_always': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_logging': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#disable_auto_complete': 0, b'deoplete#enable_smart_case': 0, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#max_menu_width': 40, b'deoplete#sources#go#pointer': 1, b'deoplete#enable_ignore_case': 0, b'deoplete#complete_method': b'complete', b'deoplete#omni#functions': {}, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#_rank': {}, b'deoplete#enable_on_insert_enter': 1, b'deoplete#ignore_sources': {}, b'deoplete#max_list': 100, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#keyword_patterns': {}, b'deoplete#enable_camel_case': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#sources#go#on_event': 0, b'deoplete#sources': {}, b'deoplete#enable_profile': 0, b'deoplete#sources#go#use_cache': 0, b'deoplete#_context': {}, b'deoplete#_omni_patterns': {b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#skip_chars': []}, b'same_filetypes': [], b'smartcase': 0, b'runtimepath': b'/home/vt/.config/nvim,/home/vt/.config/nvim/plugged/deoplete.nvim/,/home/vt/.config/nvim/plugged/vim-rhubarb/,/home/vt/.config/nvim/plugged/tabular/,/home/vt/.config/nvim/plugged/splitjoin.vim/,/home/vt/.config/nvim/plugged/delimitMate/,/home/vt/.config/nvim/plugged/ultisnips/,/home/vt/.config/nvim/plugged/vim-gitgutter/,/home/vt/.config/nvim/plugged/vim-airline/,/home/vt/.config/nvim/plugged/ctrlp.vim/,/home/vt/.config/nvim/plugged/supertab/,/home/vt/.config/nvim/plugged/vim-go/,/home/vt/.config/nvim/plugged/tagbar/,/home/vt/.config/nvim/plugged/gocode/vim/,/home/vt/.config/nvim/plugged/vim-markdown/,/home/vt/.config/nvim/plugged/nerdtree/,/home/vt/.config/nvim/plugged/nerdtree-git-plugin/,/home/vt/.config/nvim/plugged/vim-delve/,/home/vt/.config/nvim/plugged/undotree/,/home/vt/.config/nvim/plugged/vitality.vim/,/home/vt/.config/nvim/plugged/vim-choosewin/,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/,/home/vt/.config/nvim/plugged/vim-exchange/,/home/vt/.config/nvim/plugged/vim-commentary/,/home/vt/.config/nvim/plugged/vim-dispatch/,/home/vt/.config/nvim/plugged/vim-fugitive/,/home/vt/.config/nvim/plugged/vim-surround/,/home/vt/.config/nvim/plugged/scratch.vim/,/home/vt/.config/nvim/plugged/deoplete-go/,/home/vt/.config/nvim/plugged/vim-devicons/,/etc/xdg/nvim,/home/vt/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/vt/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/vt/.config/nvim/after,/home/vt/.vim,/home/vt/.config/nvim/plugged/tabular/after,/home/vt/.config/nvim/plugged/ultisnips/after,/home/vt/.config/nvim/plugged/vim-markdown/after,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/after,/home/vt/.vim/after,$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'bufvars': {}, b'bufnr': 1, b'changedtick': 3, b'custom': {b'source': {b'_': {}}}, b'omni__omnifunc': b'', b'filetype': b'vim', b'input': b"Plug 'bling/vim-airline'", b'is_windows': False, b'delay': 50, b'bufsize': 22687, b'max_kind_width': 42, b'bufpath': b'/home/vt/.vim/nvimrc', b'bufname': b'nvimrc', b'event': b'Init', b'max_abbr_width': 42, b'sources': [], b'complete_str': b'', b'camelcase': 0, b'ignorecase': 0, b'filetypes': [b'vim'], b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf#]*', b'dict__dictionary': b'', b'position': [0, 52, 24, 0], b'next_input': b'', b'encoding': b'utf-8'}]
2018-01-06 22:10:10,609 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, {b'max_menu_width': 42, b'cwd': b'/home/vt/.vim', b'vars': {b'deoplete#sources#go#align_class': 0, b'deoplete#auto_complete_delay': 50, b'deoplete#max_abbr_width': 80, b'deoplete#enable_yarp': 0, b'deoplete#omni#input_patterns': {}, b'deoplete#auto_refresh_delay': 500, b'deoplete#sources#go#package_dot': 0, b'deoplete#omni_patterns': {}, b'deoplete#enable_refresh_always': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_logging': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#disable_auto_complete': 0, b'deoplete#enable_smart_case': 0, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#max_menu_width': 40, b'deoplete#sources#go#pointer': 1, b'deoplete#enable_ignore_case': 0, b'deoplete#complete_method': b'complete', b'deoplete#omni#functions': {}, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#_rank': {}, b'deoplete#enable_on_insert_enter': 1, b'deoplete#ignore_sources': {}, b'deoplete#max_list': 100, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#keyword_patterns': {}, b'deoplete#enable_camel_case': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#sources#go#on_event': 0, b'deoplete#sources': {}, b'deoplete#enable_profile': 0, b'deoplete#sources#go#use_cache': 0, b'deoplete#_context': {}, b'deoplete#_omni_patterns': {b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#skip_chars': []}, b'same_filetypes': [], b'smartcase': 0, b'runtimepath': b'/home/vt/.config/nvim,/home/vt/.config/nvim/plugged/deoplete.nvim/,/home/vt/.config/nvim/plugged/vim-rhubarb/,/home/vt/.config/nvim/plugged/tabular/,/home/vt/.config/nvim/plugged/splitjoin.vim/,/home/vt/.config/nvim/plugged/delimitMate/,/home/vt/.config/nvim/plugged/ultisnips/,/home/vt/.config/nvim/plugged/vim-gitgutter/,/home/vt/.config/nvim/plugged/vim-airline/,/home/vt/.config/nvim/plugged/ctrlp.vim/,/home/vt/.config/nvim/plugged/supertab/,/home/vt/.config/nvim/plugged/vim-go/,/home/vt/.config/nvim/plugged/tagbar/,/home/vt/.config/nvim/plugged/gocode/vim/,/home/vt/.config/nvim/plugged/vim-markdown/,/home/vt/.config/nvim/plugged/nerdtree/,/home/vt/.config/nvim/plugged/nerdtree-git-plugin/,/home/vt/.config/nvim/plugged/vim-delve/,/home/vt/.config/nvim/plugged/undotree/,/home/vt/.config/nvim/plugged/vitality.vim/,/home/vt/.config/nvim/plugged/vim-choosewin/,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/,/home/vt/.config/nvim/plugged/vim-exchange/,/home/vt/.config/nvim/plugged/vim-commentary/,/home/vt/.config/nvim/plugged/vim-dispatch/,/home/vt/.config/nvim/plugged/vim-fugitive/,/home/vt/.config/nvim/plugged/vim-surround/,/home/vt/.config/nvim/plugged/scratch.vim/,/home/vt/.config/nvim/plugged/deoplete-go/,/home/vt/.config/nvim/plugged/vim-devicons/,/etc/xdg/nvim,/home/vt/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/vt/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/vt/.config/nvim/after,/home/vt/.vim,/home/vt/.config/nvim/plugged/tabular/after,/home/vt/.config/nvim/plugged/ultisnips/after,/home/vt/.config/nvim/plugged/vim-markdown/after,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/after,/home/vt/.vim/after,$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'bufvars': {}, b'bufnr': 1, b'changedtick': 3, b'custom': {b'source': {b'_': {}}}, b'omni__omnifunc': b'', b'filetype': b'vim', b'input': b"Plug 'bling/vim-airline'", b'is_windows': False, b'delay': 50, b'bufsize': 22687, b'max_kind_width': 42, b'bufpath': b'/home/vt/.vim/nvimrc', b'bufname': b'nvimrc', b'event': b'Init', b'max_abbr_width': 42, b'sources': [], b'complete_str': b'', b'camelcase': 0, b'ignorecase': 0, b'filetypes': [b'vim'], b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf#]*', b'dict__dictionary': b'', b'position': [0, 52, 24, 0], b'next_input': b'', b'encoding': b'utf-8'}
2018-01-06 22:10:10,609 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,642 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 3, 'nvim_get_option', ('isfname',)]
2018-01-06 22:10:10,643 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x03\xafnvim_get_option\x91\xa7isfname''
2018-01-06 22:10:10,643 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,643 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,643 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,643 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,643 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 3, None, b'@,48-57,/,.,-,_,+,,,#,$,%,~,=']
2018-01-06 22:10:10,643 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, b'@,48-57,/,.,-,_,+,,,#,$,%,~,='
2018-01-06 22:10:10,643 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,643 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 4, 'nvim_call_function', ('deoplete#util#vimoption2python_not', ['@,48-57,/,.,-,_,+,,,#,$,%,~,='])]
2018-01-06 22:10:10,644 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x04\xb2nvim_call_function\x92\xda\x00"deoplete#util#vimoption2python_not\x91\xbd@,48-57,/,.,-,_,+,,,#,$,%,~,=''
2018-01-06 22:10:10,644 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,644 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,644 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,644 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,644 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 4, None, b'[^a-zA-Z@0-9/._+,#$%~=-]']
2018-01-06 22:10:10,644 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, b'[^a-zA-Z@0-9/._+,#$%~=-]'
2018-01-06 22:10:10,644 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 5, 'nvim_eval', ('&l:filetype',)]
2018-01-06 22:10:10,645 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x05\xa9nvim_eval\x91\xab&l:filetype''
2018-01-06 22:10:10,645 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 5, None, b'vim']
2018-01-06 22:10:10,645 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, b'vim'
2018-01-06 22:10:10,645 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,645 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 6, 'nvim_get_current_buf', ()]
2018-01-06 22:10:10,645 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x06\xb4nvim_get_current_buf\x90''
2018-01-06 22:10:10,645 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 6, None, ExtType(code=0, data=b'\x01')]
2018-01-06 22:10:10,646 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, ExtType(code=0, data=b'\x01')
2018-01-06 22:10:10,646 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 7, 'nvim_buf_line_count', (ExtType(code=0, data=b'\x01'),)]
2018-01-06 22:10:10,646 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x07\xb3nvim_buf_line_count\x91\xd4\x00\x01''
2018-01-06 22:10:10,646 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,646 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,647 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,647 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 7, None, 762]
2018-01-06 22:10:10,647 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, 762
2018-01-06 22:10:10,647 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,647 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 8, 'nvim_call_function', ('getline', [1, 762])]
2018-01-06 22:10:10,647 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x08\xb2nvim_call_function\x92\xa7getline\x92\x01\xcd\x02\xfa''
2018-01-06 22:10:10,647 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,647 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,647 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,648 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,648 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 8, None, [b'"', b'" Victor Tavares\'s nvim Configuration', b'"', b'" inspired by many other examples, including:', b'" https://github.com/sjl/dotfiles/', b'" https://github.com/henrik/dotfiles/', b'" https://github.com/sebdah/dotfiles/', b'" https://github.com/fatih/dotfiles/', b'', b'"------------------------------------------------------------', b'" Global', b'"------------------------------------------------------------', b'"', b'" This must be first, because it changes other options as a side effect.', b"if has('vim_starting')", b'  set nocompatible               " Be iMproved', b'endif', b'', b'"------------------------------------------------------------', b'" Plug setup', b'"------------------------------------------------------------', b"let vimplug_exists=expand('~/.config/nvim/autoload/plug.vim')", b'', b'if !filereadable(vimplug_exists)', b'  if !executable("curl")', b'    echoerr "You have to install curl or first install vim-plug yourself!"', b'    execute "q!"', b'  endif', b'  echo "Installing Vim-Plug..."', b'  echo ""', b'  silent !\\curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim', b'  let g:not_finish_vimplug = "yes"', b'', b'  autocmd VimEnter * PlugInstall', b'endif', b'', b'" Required:', b"call plug#begin(expand('~/.config/nvim/plugged'))", b'', b'"------------------------------------------------------------', b'" My Plugins', b'"------------------------------------------------------------', b'" pre-dependencies', b"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }", b'Plug \'tpope/vim-rhubarb\'           " Depenency for tpope/fugitive', b'Plug \'godlygeek/tabular\'           " This must come before plasticboy/vim-markdown', b'', b"Plug 'AndrewRadev/splitjoin.vim'", b"Plug 'Raimondi/delimitMate'", b"Plug 'SirVer/ultisnips'", b"Plug 'airblade/vim-gitgutter'", b"Plug 'bling/vim-airline'", b"Plug 'ctrlpvim/ctrlp.vim'", b"Plug 'ervandew/supertab'", b"Plug 'fatih/vim-go'", b"Plug 'majutsushi/tagbar'", b"Plug 'nsf/gocode', {'rtp': 'vim/'}", b"Plug 'plasticboy/vim-markdown'", b"Plug 'scrooloose/nerdtree'", b"Plug 'scrooloose/nerdtree-git-plugin'", b"Plug 'sebdah/vim-delve'", b"Plug 'mbbill/undotree'", b"Plug 'sjl/vitality.vim'", b"Plug 't9md/vim-choosewin'", b"Plug 'tiagofumo/vim-nerdtree-syntax-highlight'", b"Plug 'tommcdo/vim-exchange'", b"Plug 'tpope/vim-commentary'", b"Plug 'tpope/vim-dispatch'", b"Plug 'tpope/vim-fugitive'", b"Plug 'tpope/vim-surround'", b"Plug 'vim-scripts/scratch.vim'", b"Plug 'zchee/deoplete-go', { 'do': 'make'}", b'', b'" post-dependencies', b"Plug 'ryanoasis/vim-devicons'", b'', b'" =============== Plugin Initialization ===============', b'" All of your Plugins must be added before the following line', b'call plug#end()            " required', b'filetype plugin indent on    " required', b'', b'', b'" filetype settings', b'filetype on', b'filetype plugin on', b'filetype indent on', b'', b'" tell VIM to always put a status line in, even in single window', b'set laststatus=2', b'', b'" Set default encoding to UTF-8', b'set encoding=utf-8', b'', b'" Don\'t update the display while executing macros', b'set lazyredraw', b'', b'" set wildmenu for tab completion options on command line', b'set wildmenu', b'set wildmode=list:longest,full', b'', b'" hide buffers in the background instead of closing them', b'set hidden', b'', b'" allow backspacing over everything in insert mode', b'set backspace=indent,eol,start', b'', b'" No backup files', b'set nobackup', b'set noswapfile', b'set nowb', b'', b'" lots of history', b'set history=100', b'', b'" turn on line numbering', b'set number', b'', b'" show the cursor position all the time', b'set ruler', b'', b'" When the page starts to scroll, keep the cursor 4 lines from the top and 4', b'" lines from the bottom', b'set scrolloff=4', b'', b'" prefer unix file formats', b'set fileformats=unix,dos,mac', b'', b'" speed up syntax highlighting', b'set nocursorcolumn', b'set nocursorline', b'set updatetime=100', b'', b'set nohlsearch', b'', b'" Completion window max size', b'set pumheight=10', b'', b'" Add ignorance of whitespace to diff', b'set diffopt+=iwhite', b'', b'" Add the unnamed register to the clipboard', b'set clipboard+=unnamed', b'', b'" allow F2 to toggle paste mode', b'set pastetoggle=<F2>', b'', b'" Automatically read a file that has changed on disk', b'" set autoread', b'', b'set showcmd         " display incomplete commands', b'set noshowmode      " mode shown in airline status bar', b'set visualbell      " no sounds', b'set incsearch       " do incremental searching', b'set wrapscan        " set the search scan to wrap lines', b'', b'" make the \'cw\' and like commands put a $ at the end instead', b'" of just deleting the text and replacing it', b'set cpoptions=ces$', b'', b'" Tabstops are 4 spaces', b'set smarttab', b'set shiftwidth=4', b'set softtabstop=4', b'set tabstop=4', b'set expandtab', b'set autoindent      " always set autoindenting on', b'set smartindent', b'', b'set textwidth=80', b'set colorcolumn=+1  " highlight column 81', b'', b'" Display tabs and trailing spaces visually', b'set list listchars=tab:\\ \\ ,trail:\xc2\xb7', b'', b':highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE', b'', b'', b'"------------------------------------------------------------', b'" persistent undo', b'"', b'" Keep undo history across sessions, by storing in file.', b'silent !mkdir ~/.vim/backups > /dev/null 2>&1', b'set undodir=~/.vim/backups', b'set undolevels=100', b'set undofile', b'"------------------------------------------------------------', b'"', b'', b'"============================================================', b'" Neovim specific settings', b'"============================================================', b'"if has(\'nvim\')', b'    " Set the Python binaries neovim is using. Please note that you will need to', b'    " install the neovim package for these binaries separately like this for', b'    " example:', b'    " pip3 install -U neovim', b'"    let g:python_host_prog = \'/usr/local/bin/python2.7\'', b'"    let g:python3_host_prog = \'/usr/local/bin/python3.6\'', b'"endif', b'', b'"============================================================', b'" FileTypes', b'"============================================================', b'', b'autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4', b'', b'', b'"============================================================', b'" maps', b'"============================================================', b'', b'" System default for mappings is now the space character', b'nnoremap <SPACE> <Nop>', b'let mapleader = "\\<Space>"', b'', b'" redraw the screen', b'map <Leader><Leader> :redraw!<CR>', b'', b'" Don\'t use Ex mode, use Q for formatting', b'map Q gq', b'', b'" cycle through buffers with shift + left/right arrow', b'nnoremap <S-Right> :bnext<CR>', b'nnoremap <S-Left> :bprevious<CR>', b'', b'" cycle through tabs with control + shift + left/right arrow', b'noremap <C-S-Left> :tabp<CR>', b'noremap <C-S-Right> :tabn<CR>', b'', b'" redo', b'nmap <Leader>u <C-R>', b'', b'" Kill buffer', b'nnoremap <Leader>, :bd<cr>', b'', b'" Close all but the current one', b'nnoremap <Leader>. :only<CR>', b'', b'" Print the full path', b'map <C-F> :echo expand("%:p")<CR>', b'', b'" quickly type kkj in insert mode to <ESC>', b'imap kkj <Esc>', b'', b'" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,', b'" so that you can undo CTRL-U after inserting a line break.', b'inoremap <C-U> <C-G>u<C-U>', b'', b'" Underline the current line with \'=\', \'-\', or \'~\'', b'nmap <Leader>== :t.\\|s/./=/g\\|:nohls<cr>', b'nmap <Leader>-- :t.\\|s/./-/g\\|:nohls<cr>', b'nmap <Leader>~~ :t.\\|s/./\\\\~/g\\|:nohls<cr>', b'', b'" window movement', b'nmap <Leader>j <C-W>j', b'nmap <Leader>k <C-W>k', b'nmap <Leader>h <C-W>h', b'nmap <Leader>l <C-W>l', b'nmap <Leader>w <C-W><C-W>', b'" close window', b'nmap <Leader>c <C-W>c', b'', b'" Shrink the current window to fit the number of lines in the buffer.  Useful', b'" for those buffers that are only a few lines', b'nmap <Leader>sw :execute ":resize " . line(\'$\')<cr>', b'', b'" set text wrapping toggles', b'nmap <Leader>ww :set invwrap<CR>:set wrap?<CR>', b'', b'" Launch the Mark app to view markdown file being edited', b'command! Markdown !open -a Marked %', b'map <Leader>md :Markdown<CR>', b'', b'" toggle dark or light background', b'map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark")<CR>', b'', b'" turn off diff', b'map <Leader>D :diffoff!<CR>', b'', b'" toggle spelling on/off', b'map <F3> :setlocal spell! spelllang=en_ca<CR>', b'imap <F3> <C-o>:setlocal spell! spelllang=en_ca<CR>', b'', b'" Keep search matches in the middle of the window.', b'nnoremap n nzzzv', b'nnoremap N Nzzzv', b'', b'" Same when jumping around', b'nnoremap g; g;zz', b'nnoremap g, g,zz', b'nnoremap <C-o> <C-o>zz', b'', b'" Do not show the q: window', b'map q: :q', b'', b'" expand file path of active buffer (for :edit, :write, etc)', b'" from Pragmatic Practical Vim', b"cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'", b'', b'" quickfix window navigation', b'map <C-n> :cnext<CR>', b'map <C-m> :cprevious<CR>', b'nnoremap <Leader>q :cclose<CR>', b'', b'"============================================================', b'" functions, commands, macros, etc', b'"============================================================', b'', b'" This is the timeout used while waiting for user input on a multi-keyed macro', b'" or while just sitting and waiting for another key to be pressed measured', b'" in milliseconds - i.e. for the \',d\' command, there is a \'timeoutlen\' wait', b'" period between the \'<space>\' key and \'d\' key.  If the \'d\' key isn\'t pressed', b'" before the timeout expires, one of two things happens: The \'<space>\' command', b'" is executed if there is one (which there isn\'t) or the command aborts', b'set timeoutlen=500', b'', b'" Resize splits when the window is resized', b'au VimResized * :wincmd =', b'', b'" Jump to last cursor position when file was opened', b'augroup vimrcEx', b'    autocmd!', b'    autocmd BufReadPost *', b'      \\ if line("\'\\"") > 0 && line("\'\\"") <= line("$") |', b'      \\   exe "normal g`\\"" |', b'      \\ endif', b'augroup END', b'', b'', b'" Exclude git commit messages from jump to last position', b'augroup gitCommitEditMsg', b'  autocmd!', b'  autocmd BufReadPost *', b"    \\ if @% == '.git/COMMIT_EDITMSG' |", b'    \\   exe "normal gg" |', b'    \\ endif', b'augroup END', b'', b'', b'" remove trailing whitespace in whole file', b'func! DeleteTrailingWS()', b'  exe "normal mz"', b'  %s/\\s\\+$//ge', b'  exe "normal `z"', b'endfunc', b'', b'" map trailing whitespace deletion to <Leader>ws', b'noremap <Leader>ws :call DeleteTrailingWS()<CR>', b'', b'"============================================================', b'" text replacements', b'"============================================================', b'iabbrev vmt Victor Tavares', b'', b'"iso 8601 date format', b'iabbrev idate <C-r>=strftime("%Y-%m-%d")<CR>', b'', b'"iso 8601 date and time format', b'iabbrev itdate <C-r>=strftime("%Y-%m-%d %H:%M:%S %z")<CR>', b'', b'" rfc 2822 date format', b'iabbrev rdate <C-r>=strftime("%d %b %Y")<CR>', b'', b'" rfc 2822 date and time', b'iabbrev rtdate <C-r>=strftime("%a, %d %b %Y %T %z")<CR>', b'', b'', b'"============================================================', b'" GUI and colours', b'"============================================================', b'" In many terminal emulators the mouse works just fine, thus enable it.', b"if has('mouse')", b'  set mouse=a', b'  " hide the mouse pointer while typing', b'  set mousehide', b'endif', b'', b'" Switch syntax highlighting on, when the terminal has colors', b'" Also switch on highlighting the last used search pattern.', b'if &t_Co > 2 || has("gui_running")', b'  syntax on', b'  " Syntax coloring lines that are too long just slows down the world', b'  set synmaxcol=2048', b'  set background=dark', b'  colorscheme solarized', b'  set guifont=Meslo\\ LG\\ M\\ DZ\\ Regular\\ for\\ Powerline\\ Nerd\\ Font\\ Complete:h12', b'endif', b'', b'" underline and highlight spelling errors in red', b'hi clear SpellBad', b'hi SpellBad cterm=underline ctermfg=red', b'', b'" Time out on key codes but not mappings.', b'" Basically this makes terminal Vim work sanely.', b"if !has('gui_running')", b'  set notimeout', b'  set ttimeout', b'  set ttimeoutlen=10', b'  augroup FastEscape', b'    autocmd!', b'    au InsertEnter * set timeoutlen=0', b'    au InsertLeave * set timeoutlen=1000', b'  augroup END', b'endif', b'', b'', b'"============================================================', b'" Quick Editing in new window', b'"============================================================', b'noremap <Leader>ev :vsplit $MYVIMRC<CR>     " open up .vimrc', b'', b'', b'"============================================================', b'" Plugin Configurations', b'"============================================================', b'', b'"------------------------------------------------------------', b'" vim-devicons', b'"------------------------------------------------------------', b'let g:webdevicons_enable = 1', b'', b'"------------------------------------------------------------', b'" vim-airline', b'"------------------------------------------------------------', b'let g:airline#extensions#tabline#enabled = 1', b'let g:airline#extensions#tabline#buffer_min_count = 2 " min buffs to show', b'let g:airline#extensions#tabline#tab_nr_type = 1 " tab number', b"let g:airline#extensions#tabline#left_sep=' '", b"let g:airline#extensions#tabline#left_alt_sep='\xc2\xa6'", b'let g:airline#extensions#branch#enabled = 1', b"let g:airline#extensions#branch#empty_message = ''", b'let g:airline#extensions#whitespace#enabled = 0', b'let g:airline_powerline_fonts = 1', b'let g:bufferline_echo = 0', b'', b"if !exists('g:airline_symbols')", b'  let g:airline_symbols = {}', b'endif', b'', b'" powerline symbols', b"let g:airline_left_sep = '\xee\x82\xb0'", b"let g:airline_left_alt_sep = '\xee\x82\xb1'", b"let g:airline_right_sep = '\xee\x82\xb2'", b"let g:airline_right_alt_sep = '\xee\x82\xb3'", b"let g:airline_symbols.crypt = '\xf0\x9f\x94\x92'", b"let g:airline_symbols.branch = '\xee\x82\xa0'", b"let g:airline_symbols.readonly = '\xee\x82\xa2'", b"let g:airline_symbols.linenr = '\xc2\xb6'", b"let g:airline_symbols.maxlinenr = ''", b"let g:airline_symbols.maxlinenr = '\xe3\x8f\x91'", b"let g:airline_symbols.spell = '\xea\x9e\xa8'", b"let g:airline_symbols.paste = '\xc3\x9e'", b'', b'" enable vim-devicons in vim-airline', b'let g:webdevicons_enable_airline_tabline = 1', b'', b'', b'"------------------------------------------------------------', b'" vim-fugitive', b'"------------------------------------------------------------', b'nmap <Leader>Ga :Gadd<cr>', b'nmap <Leader>Gb :Gblame<cr>', b'nmap <Leader>Gci :Gcommit<cr>', b'nmap <Leader>Gco :Gcheckout<cr>', b'nmap <Leader>Gd :Gdiff<cr>', b'nmap <Leader>Ge :Gedit<cr>', b'nmap <Leader>Gl :Glog<cr>', b'nmap <Leader>Gm :Gmove<cr>', b'nmap <Leader>Gr :Gremove<cr>', b'nmap <Leader>Gs :Gstatus<cr>', b'nmap <Leader>Gw :Gwrite<cr>', b'nmap <Leader>Gh :.Gbrowse<CR>   "open in GitHub', b'', b'"-----------------------------------------------------------------------------', b'" NERD Tree Plugin Settings', b'"-----------------------------------------------------------------------------', b'" Toggle the NERD Tree on an off with F7', b'nmap <F7> :NERDTreeToggle<CR>', b'', b'" Find in NERD Tree with Shift-F7', b'nmap <S-F7> :NERDTreeFind<CR>', b'', b'" move NERDTree window to the left', b'let g:NERDTreeWinPos = "left"', b'', b'" make window decent size', b'let g:NERDTreeWinSize = 48', b'', b'" close NERDTree window when opening a file', b'let g:NERDTreeQuitOnOpen = 1', b'', b'" Show the bookmarks table on startup', b'let g:NERDTreeShowBookmarks=1', b'', b'" Close vim if NERDTree is the only opened window', b'autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif', b'', b'" vim-devions configuration', b'let g:webdevicons_enable_nerdtree = 1', b'let g:WebDevIconsUnicodeDecorateFolderNodes = 1', b"let g:WebDevIconsOS = 'Darwin'", b'', b'', b'" Don\'t display these kinds of files', b'" let NERDTreeIgnore=[ \'\\.obj$\', \'\\.bak$\']', b'', b'', b'"-----------------------------------------------------------------------------', b'" CtrlP Settings', b'"-----------------------------------------------------------------------------', b"let g:ctrlp_working_path_mode = 'ra'", b'" jump to file if already open instead of opening a new instance', b"let g:ctrlp_switch_buffer = 'Et'", b'let g:ctrlp_mruf_max=450    " number of recently opened files', b'let g:ctrlp_max_files=0     " do not limit the number of searchable files', b'let g:ctrlp_use_caching = 1', b'let g:ctrlp_clear_cache_on_exit = 0', b"let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'", b"let g:ctrlp_match_window = 'bottom,order:btt,max:10,results:10'", b"let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ftv'}", b'', b'map <Leader>fw :CtrlPBuffer<cr>', b'" file current dir', b'map <Leader>ff :CtrlP .<cr>', b'" file root', b'map <Leader>fr :CtrlP<cr>', b'" files, buffers, and MRU', b'map <Leader>fm :CtrlPMixed<cr>', b'', b'" enable vim-devicons', b'let g:webdevicons_enable_ctrlp = 1', b'', b'', b'"-----------------------------------------------------------------------------', b'" UltiSnips', b'"-----------------------------------------------------------------------------', b"let g:UltiSnipsListSnippets = '<F9>'", b'', b'function! g:UltiSnips_Complete()', b'  call UltiSnips#ExpandSnippet()', b'  if g:ulti_expand_res == 0', b'    if pumvisible()', b'      return "\\<C-n>"', b'    else', b'      call UltiSnips#JumpForwards()', b'      if g:ulti_jump_forwards_res == 0', b'        return "\\<TAB>"', b'      endif', b'    endif', b'  endif', b'  return ""', b'endfunction', b'', b'function! g:UltiSnips_Reverse()', b'  call UltiSnips#JumpBackwards()', b'  if g:ulti_jump_backwards_res == 0', b'    return "\\<C-P>"', b'  endif', b'', b'  return ""', b'endfunction', b'', b'', b'if !exists("g:UltiSnipsJumpForwardTrigger")', b'  let g:UltiSnipsJumpForwardTrigger = "<tab>"', b'endif', b'', b'if !exists("g:UltiSnipsJumpBackwardTrigger")', b'  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"', b'endif', b'', b'au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"', b'au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"', b'', b'', b'"-----------------------------------------------------------------------------', b'" Tagbar settings', b'"-----------------------------------------------------------------------------', b'nmap <F8> :TagbarToggle<CR>', b'let g:tagbar_autofocus = 1', b'" disabled - slow - enable tagbar in vim-airline status bar when needed', b'let g:airline#extensions#tagbar#enabled = 0', b'" go', b'let g:tagbar_type_go = {', b"    \\ 'ctagstype' : 'go',", b"    \\ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',", b"        \\ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',", b"        \\ 'r:constructor', 'f:functions' ],", b"    \\ 'sro' : '.',", b"    \\ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },", b"    \\ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },", b"    \\ 'ctagsbin'  : 'gotags',", b"    \\ 'ctagsargs' : '-sort -silent'", b'    \\ }', b'', b'', b'', b'"-----------------------------------------------------------------------------', b'" vim-go settings', b'"-----------------------------------------------------------------------------', b'let g:go_fmt_fail_silently = 0', b'" use goimports for formatting', b'let g:go_fmt_command = "goimports"', b'" use quickfix for all errors', b'let g:go_list_type = "quickfix"', b'" highlight same variable,function or struct.', b'let g:go_auto_sameids = 1', b'" don\'t use the default guru command for defs', b"let g:go_def_mode = 'godef'", b'" disable automatically show type info', b'let g:go_auto_type_info = 1', b'let g:go_def_mode = "guru"', b'let g:go_echo_command_info = 1', b'let g:go_gocode_autobuild = 0', b'let g:go_gocode_unimported_packages = 1', b'let g:go_autodetect_gopath = 1', b'let g:go_info_mode = "guru"', b'let g:go_term_mode = "split"', b'', b'', b'" highlight in vim-go', b'let g:go_highlight_array_whitespace_error = 0', b'let g:go_highlight_build_constraints = 1', b'let g:go_highlight_extra_types = 0', b'let g:go_highlight_fields = 1', b'let g:go_highlight_functions = 1', b'let g:go_highlight_methods = 1', b'let g:go_highlight_operators = 1', b'let g:go_highlight_space_tab_error = 0', b'let g:go_highlight_structs = 1', b'let g:go_highlight_trailing_whitespace_error = 0', b'let g:go_highlight_types = 1', b'', b"let g:go_modifytags_transform = 'snake_case'", b'', b'" run :GoBuild or :GoTestCompile based on the go file', b'function! s:build_go_files()', b"  let l:file = expand('%')", b"  if l:file =~# '^\\f\\+_test\\.go$'", b'    call go#test#Test(0, 1)', b"  elseif l:file =~# '^\\f\\+\\.go$'", b'    call go#cmd#Build(0)', b'  endif', b'endfunction', b'', b'"au FileType go nmap <Leader>gb <Plug>(go-build)', b'autocmd FileType go nmap <silent> <Leader>gb :<C-u>call <SID>build_go_files()<CR>', b'', b'" gometalinter configuration', b'let g:go_metalinter_command = ""', b'let g:go_metalinter_deadline = "5s"', b'let g:go_metalinter_enabled = [', b"    \\ 'deadcode',", b"    \\ 'errcheck',", b"    \\ 'gas',", b"    \\ 'goconst',", b"    \\ 'gocyclo',", b"    \\ 'golint',", b"    \\ 'gosimple',", b"    \\ 'ineffassign',", b"    \\ 'vet',", b"    \\ 'vetshadow'", b'\\]', b'', b'au FileType go nmap <Leader>gr <Plug>(go-run)', b'au FileType go nmap <Leader>gt <Plug>(go-test)', b'au FileType go nmap <Leader>gc <Plug>(go-coverage-toggle)', b'au FileType go nmap <Leader>gd <Plug>(go-doc)', b'au FileType go nmap <Leader>gw <Plug>(go-doc-browser)', b'au FileType go nmap <Leader>gs <Plug>(go-implements)', b'au FileType go nmap <Leader>gi <Plug>(go-info)', b'au FileType go nmap <Leader>ge <Plug>(go-rename)', b'au FileType go nmap <Leader>ga <Plug>(go-alternate-edit)', b'au FileType go nmap <F1> :GoDoc<cr>', b'au FileType go nmap <F5> :GoCoverageToggle -short<cr>', b'au FileType go nmap <F6> :GoAlternate <cr>', b'', b'', b'" create a go doc comment based on the word under the cursor', b'function! s:create_go_doc_comment()', b'  norm "zyiw', b'  execute ":put! z"', b'  execute ":norm I// \\<Esc>$"', b'endfunction', b'au FileType go nmap <silent> <Leader>go :<C-u>call <SID>create_go_doc_comment()<CR>', b'', b'"-----------------------------------------------------------------------------', b'" deoplete settings', b'"-----------------------------------------------------------------------------', b'set runtimepath+=$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'let g:deoplete#enable_at_startup = 1', b'', b'"-----------------------------------------------------------------------------', b'" deoplete-go settings', b'"-----------------------------------------------------------------------------', b'" Enable completing of go pointers', b'let g:deoplete#sources#go#pointer = 1', b'', b'"-----------------------------------------------------------------------------', b'" vim-delve settings', b'"-----------------------------------------------------------------------------', b'" Set the Delve backend.', b'let g:delve_backend = "native"', b'', b'"-----------------------------------------------------------------------------', b'" vim-markdown settings', b'"-----------------------------------------------------------------------------', b'" Disable folding', b'let g:vim_markdown_folding_disabled = 1', b'', b'" Auto shrink the TOC, so that it won\'t take up 50% of the screen', b'let g:vim_markdown_toc_autofit = 1', b'', b'"-----------------------------------------------------------------------------', b'" Undotree settings', b'"-----------------------------------------------------------------------------', b'nnoremap <F4> :UndotreeToggle<CR>', b'', b'"-----------------------------------------------------------------------------', b'" delimitMate settings', b'"-----------------------------------------------------------------------------', b'let g:delimitMate_expand_cr = 1', b'let g:delimitMate_expand_space = 1', b'let g:delimitMate_smart_quotes = 1', b'let g:delimitMate_expand_inside_quotes = 0', b"let g:delimitMate_smart_matchpairs = '^\\%(\\w\\|\\$\\)'", b'', b'', b'"-----------------------------------------------------------------------------', b'" Vitality settings', b'"-----------------------------------------------------------------------------', b'let g:vitality_fix_cursor = 1', b'let g:vitality_fix_focus = 0', b'let g:vitality_always_assume_iterm = 1', b'', b'', b'"-----------------------------------------------------------------------------', b'" Scratch settings', b'"-----------------------------------------------------------------------------', b'command! ScratchToggle call ScratchToggle()', b'', b'function! ScratchToggle()', b'    if exists("w:is_scratch_window")', b'        unlet w:is_scratch_window', b'        exec "q"', b'    else', b'        exec "normal! :Sscratch\\<cr>\\<C-W>L"', b'        let w:is_scratch_window = 1', b'    endif', b'endfunction', b'', b'nnoremap <Leader><TAB> :ScratchToggle<cr>', b'', b'', b'"-----------------------------------------------------------------------------', b'" Choosewin settings', b'"-----------------------------------------------------------------------------', b'nmap <F10> <Plug>(choosewin)', b'nmap <S-F10> <plug>(choosewin-swap)', b'let g:choosewin_overlay_enable=1', b'let g:choosewin_return_on_single_win=1  " return immediately when only 1 win', b'']]
2018-01-06 22:10:10,649 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, [b'"', b'" Victor Tavares\'s nvim Configuration', b'"', b'" inspired by many other examples, including:', b'" https://github.com/sjl/dotfiles/', b'" https://github.com/henrik/dotfiles/', b'" https://github.com/sebdah/dotfiles/', b'" https://github.com/fatih/dotfiles/', b'', b'"------------------------------------------------------------', b'" Global', b'"------------------------------------------------------------', b'"', b'" This must be first, because it changes other options as a side effect.', b"if has('vim_starting')", b'  set nocompatible               " Be iMproved', b'endif', b'', b'"------------------------------------------------------------', b'" Plug setup', b'"------------------------------------------------------------', b"let vimplug_exists=expand('~/.config/nvim/autoload/plug.vim')", b'', b'if !filereadable(vimplug_exists)', b'  if !executable("curl")', b'    echoerr "You have to install curl or first install vim-plug yourself!"', b'    execute "q!"', b'  endif', b'  echo "Installing Vim-Plug..."', b'  echo ""', b'  silent !\\curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim', b'  let g:not_finish_vimplug = "yes"', b'', b'  autocmd VimEnter * PlugInstall', b'endif', b'', b'" Required:', b"call plug#begin(expand('~/.config/nvim/plugged'))", b'', b'"------------------------------------------------------------', b'" My Plugins', b'"------------------------------------------------------------', b'" pre-dependencies', b"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }", b'Plug \'tpope/vim-rhubarb\'           " Depenency for tpope/fugitive', b'Plug \'godlygeek/tabular\'           " This must come before plasticboy/vim-markdown', b'', b"Plug 'AndrewRadev/splitjoin.vim'", b"Plug 'Raimondi/delimitMate'", b"Plug 'SirVer/ultisnips'", b"Plug 'airblade/vim-gitgutter'", b"Plug 'bling/vim-airline'", b"Plug 'ctrlpvim/ctrlp.vim'", b"Plug 'ervandew/supertab'", b"Plug 'fatih/vim-go'", b"Plug 'majutsushi/tagbar'", b"Plug 'nsf/gocode', {'rtp': 'vim/'}", b"Plug 'plasticboy/vim-markdown'", b"Plug 'scrooloose/nerdtree'", b"Plug 'scrooloose/nerdtree-git-plugin'", b"Plug 'sebdah/vim-delve'", b"Plug 'mbbill/undotree'", b"Plug 'sjl/vitality.vim'", b"Plug 't9md/vim-choosewin'", b"Plug 'tiagofumo/vim-nerdtree-syntax-highlight'", b"Plug 'tommcdo/vim-exchange'", b"Plug 'tpope/vim-commentary'", b"Plug 'tpope/vim-dispatch'", b"Plug 'tpope/vim-fugitive'", b"Plug 'tpope/vim-surround'", b"Plug 'vim-scripts/scratch.vim'", b"Plug 'zchee/deoplete-go', { 'do': 'make'}", b'', b'" post-dependencies', b"Plug 'ryanoasis/vim-devicons'", b'', b'" =============== Plugin Initialization ===============', b'" All of your Plugins must be added before the following line', b'call plug#end()            " required', b'filetype plugin indent on    " required', b'', b'', b'" filetype settings', b'filetype on', b'filetype plugin on', b'filetype indent on', b'', b'" tell VIM to always put a status line in, even in single window', b'set laststatus=2', b'', b'" Set default encoding to UTF-8', b'set encoding=utf-8', b'', b'" Don\'t update the display while executing macros', b'set lazyredraw', b'', b'" set wildmenu for tab completion options on command line', b'set wildmenu', b'set wildmode=list:longest,full', b'', b'" hide buffers in the background instead of closing them', b'set hidden', b'', b'" allow backspacing over everything in insert mode', b'set backspace=indent,eol,start', b'', b'" No backup files', b'set nobackup', b'set noswapfile', b'set nowb', b'', b'" lots of history', b'set history=100', b'', b'" turn on line numbering', b'set number', b'', b'" show the cursor position all the time', b'set ruler', b'', b'" When the page starts to scroll, keep the cursor 4 lines from the top and 4', b'" lines from the bottom', b'set scrolloff=4', b'', b'" prefer unix file formats', b'set fileformats=unix,dos,mac', b'', b'" speed up syntax highlighting', b'set nocursorcolumn', b'set nocursorline', b'set updatetime=100', b'', b'set nohlsearch', b'', b'" Completion window max size', b'set pumheight=10', b'', b'" Add ignorance of whitespace to diff', b'set diffopt+=iwhite', b'', b'" Add the unnamed register to the clipboard', b'set clipboard+=unnamed', b'', b'" allow F2 to toggle paste mode', b'set pastetoggle=<F2>', b'', b'" Automatically read a file that has changed on disk', b'" set autoread', b'', b'set showcmd         " display incomplete commands', b'set noshowmode      " mode shown in airline status bar', b'set visualbell      " no sounds', b'set incsearch       " do incremental searching', b'set wrapscan        " set the search scan to wrap lines', b'', b'" make the \'cw\' and like commands put a $ at the end instead', b'" of just deleting the text and replacing it', b'set cpoptions=ces$', b'', b'" Tabstops are 4 spaces', b'set smarttab', b'set shiftwidth=4', b'set softtabstop=4', b'set tabstop=4', b'set expandtab', b'set autoindent      " always set autoindenting on', b'set smartindent', b'', b'set textwidth=80', b'set colorcolumn=+1  " highlight column 81', b'', b'" Display tabs and trailing spaces visually', b'set list listchars=tab:\\ \\ ,trail:\xc2\xb7', b'', b':highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE', b'', b'', b'"------------------------------------------------------------', b'" persistent undo', b'"', b'" Keep undo history across sessions, by storing in file.', b'silent !mkdir ~/.vim/backups > /dev/null 2>&1', b'set undodir=~/.vim/backups', b'set undolevels=100', b'set undofile', b'"------------------------------------------------------------', b'"', b'', b'"============================================================', b'" Neovim specific settings', b'"============================================================', b'"if has(\'nvim\')', b'    " Set the Python binaries neovim is using. Please note that you will need to', b'    " install the neovim package for these binaries separately like this for', b'    " example:', b'    " pip3 install -U neovim', b'"    let g:python_host_prog = \'/usr/local/bin/python2.7\'', b'"    let g:python3_host_prog = \'/usr/local/bin/python3.6\'', b'"endif', b'', b'"============================================================', b'" FileTypes', b'"============================================================', b'', b'autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4', b'', b'', b'"============================================================', b'" maps', b'"============================================================', b'', b'" System default for mappings is now the space character', b'nnoremap <SPACE> <Nop>', b'let mapleader = "\\<Space>"', b'', b'" redraw the screen', b'map <Leader><Leader> :redraw!<CR>', b'', b'" Don\'t use Ex mode, use Q for formatting', b'map Q gq', b'', b'" cycle through buffers with shift + left/right arrow', b'nnoremap <S-Right> :bnext<CR>', b'nnoremap <S-Left> :bprevious<CR>', b'', b'" cycle through tabs with control + shift + left/right arrow', b'noremap <C-S-Left> :tabp<CR>', b'noremap <C-S-Right> :tabn<CR>', b'', b'" redo', b'nmap <Leader>u <C-R>', b'', b'" Kill buffer', b'nnoremap <Leader>, :bd<cr>', b'', b'" Close all but the current one', b'nnoremap <Leader>. :only<CR>', b'', b'" Print the full path', b'map <C-F> :echo expand("%:p")<CR>', b'', b'" quickly type kkj in insert mode to <ESC>', b'imap kkj <Esc>', b'', b'" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,', b'" so that you can undo CTRL-U after inserting a line break.', b'inoremap <C-U> <C-G>u<C-U>', b'', b'" Underline the current line with \'=\', \'-\', or \'~\'', b'nmap <Leader>== :t.\\|s/./=/g\\|:nohls<cr>', b'nmap <Leader>-- :t.\\|s/./-/g\\|:nohls<cr>', b'nmap <Leader>~~ :t.\\|s/./\\\\~/g\\|:nohls<cr>', b'', b'" window movement', b'nmap <Leader>j <C-W>j', b'nmap <Leader>k <C-W>k', b'nmap <Leader>h <C-W>h', b'nmap <Leader>l <C-W>l', b'nmap <Leader>w <C-W><C-W>', b'" close window', b'nmap <Leader>c <C-W>c', b'', b'" Shrink the current window to fit the number of lines in the buffer.  Useful', b'" for those buffers that are only a few lines', b'nmap <Leader>sw :execute ":resize " . line(\'$\')<cr>', b'', b'" set text wrapping toggles', b'nmap <Leader>ww :set invwrap<CR>:set wrap?<CR>', b'', b'" Launch the Mark app to view markdown file being edited', b'command! Markdown !open -a Marked %', b'map <Leader>md :Markdown<CR>', b'', b'" toggle dark or light background', b'map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark")<CR>', b'', b'" turn off diff', b'map <Leader>D :diffoff!<CR>', b'', b'" toggle spelling on/off', b'map <F3> :setlocal spell! spelllang=en_ca<CR>', b'imap <F3> <C-o>:setlocal spell! spelllang=en_ca<CR>', b'', b'" Keep search matches in the middle of the window.', b'nnoremap n nzzzv', b'nnoremap N Nzzzv', b'', b'" Same when jumping around', b'nnoremap g; g;zz', b'nnoremap g, g,zz', b'nnoremap <C-o> <C-o>zz', b'', b'" Do not show the q: window', b'map q: :q', b'', b'" expand file path of active buffer (for :edit, :write, etc)', b'" from Pragmatic Practical Vim', b"cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'", b'', b'" quickfix window navigation', b'map <C-n> :cnext<CR>', b'map <C-m> :cprevious<CR>', b'nnoremap <Leader>q :cclose<CR>', b'', b'"============================================================', b'" functions, commands, macros, etc', b'"============================================================', b'', b'" This is the timeout used while waiting for user input on a multi-keyed macro', b'" or while just sitting and waiting for another key to be pressed measured', b'" in milliseconds - i.e. for the \',d\' command, there is a \'timeoutlen\' wait', b'" period between the \'<space>\' key and \'d\' key.  If the \'d\' key isn\'t pressed', b'" before the timeout expires, one of two things happens: The \'<space>\' command', b'" is executed if there is one (which there isn\'t) or the command aborts', b'set timeoutlen=500', b'', b'" Resize splits when the window is resized', b'au VimResized * :wincmd =', b'', b'" Jump to last cursor position when file was opened', b'augroup vimrcEx', b'    autocmd!', b'    autocmd BufReadPost *', b'      \\ if line("\'\\"") > 0 && line("\'\\"") <= line("$") |', b'      \\   exe "normal g`\\"" |', b'      \\ endif', b'augroup END', b'', b'', b'" Exclude git commit messages from jump to last position', b'augroup gitCommitEditMsg', b'  autocmd!', b'  autocmd BufReadPost *', b"    \\ if @% == '.git/COMMIT_EDITMSG' |", b'    \\   exe "normal gg" |', b'    \\ endif', b'augroup END', b'', b'', b'" remove trailing whitespace in whole file', b'func! DeleteTrailingWS()', b'  exe "normal mz"', b'  %s/\\s\\+$//ge', b'  exe "normal `z"', b'endfunc', b'', b'" map trailing whitespace deletion to <Leader>ws', b'noremap <Leader>ws :call DeleteTrailingWS()<CR>', b'', b'"============================================================', b'" text replacements', b'"============================================================', b'iabbrev vmt Victor Tavares', b'', b'"iso 8601 date format', b'iabbrev idate <C-r>=strftime("%Y-%m-%d")<CR>', b'', b'"iso 8601 date and time format', b'iabbrev itdate <C-r>=strftime("%Y-%m-%d %H:%M:%S %z")<CR>', b'', b'" rfc 2822 date format', b'iabbrev rdate <C-r>=strftime("%d %b %Y")<CR>', b'', b'" rfc 2822 date and time', b'iabbrev rtdate <C-r>=strftime("%a, %d %b %Y %T %z")<CR>', b'', b'', b'"============================================================', b'" GUI and colours', b'"============================================================', b'" In many terminal emulators the mouse works just fine, thus enable it.', b"if has('mouse')", b'  set mouse=a', b'  " hide the mouse pointer while typing', b'  set mousehide', b'endif', b'', b'" Switch syntax highlighting on, when the terminal has colors', b'" Also switch on highlighting the last used search pattern.', b'if &t_Co > 2 || has("gui_running")', b'  syntax on', b'  " Syntax coloring lines that are too long just slows down the world', b'  set synmaxcol=2048', b'  set background=dark', b'  colorscheme solarized', b'  set guifont=Meslo\\ LG\\ M\\ DZ\\ Regular\\ for\\ Powerline\\ Nerd\\ Font\\ Complete:h12', b'endif', b'', b'" underline and highlight spelling errors in red', b'hi clear SpellBad', b'hi SpellBad cterm=underline ctermfg=red', b'', b'" Time out on key codes but not mappings.', b'" Basically this makes terminal Vim work sanely.', b"if !has('gui_running')", b'  set notimeout', b'  set ttimeout', b'  set ttimeoutlen=10', b'  augroup FastEscape', b'    autocmd!', b'    au InsertEnter * set timeoutlen=0', b'    au InsertLeave * set timeoutlen=1000', b'  augroup END', b'endif', b'', b'', b'"============================================================', b'" Quick Editing in new window', b'"============================================================', b'noremap <Leader>ev :vsplit $MYVIMRC<CR>     " open up .vimrc', b'', b'', b'"============================================================', b'" Plugin Configurations', b'"============================================================', b'', b'"------------------------------------------------------------', b'" vim-devicons', b'"------------------------------------------------------------', b'let g:webdevicons_enable = 1', b'', b'"------------------------------------------------------------', b'" vim-airline', b'"------------------------------------------------------------', b'let g:airline#extensions#tabline#enabled = 1', b'let g:airline#extensions#tabline#buffer_min_count = 2 " min buffs to show', b'let g:airline#extensions#tabline#tab_nr_type = 1 " tab number', b"let g:airline#extensions#tabline#left_sep=' '", b"let g:airline#extensions#tabline#left_alt_sep='\xc2\xa6'", b'let g:airline#extensions#branch#enabled = 1', b"let g:airline#extensions#branch#empty_message = ''", b'let g:airline#extensions#whitespace#enabled = 0', b'let g:airline_powerline_fonts = 1', b'let g:bufferline_echo = 0', b'', b"if !exists('g:airline_symbols')", b'  let g:airline_symbols = {}', b'endif', b'', b'" powerline symbols', b"let g:airline_left_sep = '\xee\x82\xb0'", b"let g:airline_left_alt_sep = '\xee\x82\xb1'", b"let g:airline_right_sep = '\xee\x82\xb2'", b"let g:airline_right_alt_sep = '\xee\x82\xb3'", b"let g:airline_symbols.crypt = '\xf0\x9f\x94\x92'", b"let g:airline_symbols.branch = '\xee\x82\xa0'", b"let g:airline_symbols.readonly = '\xee\x82\xa2'", b"let g:airline_symbols.linenr = '\xc2\xb6'", b"let g:airline_symbols.maxlinenr = ''", b"let g:airline_symbols.maxlinenr = '\xe3\x8f\x91'", b"let g:airline_symbols.spell = '\xea\x9e\xa8'", b"let g:airline_symbols.paste = '\xc3\x9e'", b'', b'" enable vim-devicons in vim-airline', b'let g:webdevicons_enable_airline_tabline = 1', b'', b'', b'"------------------------------------------------------------', b'" vim-fugitive', b'"------------------------------------------------------------', b'nmap <Leader>Ga :Gadd<cr>', b'nmap <Leader>Gb :Gblame<cr>', b'nmap <Leader>Gci :Gcommit<cr>', b'nmap <Leader>Gco :Gcheckout<cr>', b'nmap <Leader>Gd :Gdiff<cr>', b'nmap <Leader>Ge :Gedit<cr>', b'nmap <Leader>Gl :Glog<cr>', b'nmap <Leader>Gm :Gmove<cr>', b'nmap <Leader>Gr :Gremove<cr>', b'nmap <Leader>Gs :Gstatus<cr>', b'nmap <Leader>Gw :Gwrite<cr>', b'nmap <Leader>Gh :.Gbrowse<CR>   "open in GitHub', b'', b'"-----------------------------------------------------------------------------', b'" NERD Tree Plugin Settings', b'"-----------------------------------------------------------------------------', b'" Toggle the NERD Tree on an off with F7', b'nmap <F7> :NERDTreeToggle<CR>', b'', b'" Find in NERD Tree with Shift-F7', b'nmap <S-F7> :NERDTreeFind<CR>', b'', b'" move NERDTree window to the left', b'let g:NERDTreeWinPos = "left"', b'', b'" make window decent size', b'let g:NERDTreeWinSize = 48', b'', b'" close NERDTree window when opening a file', b'let g:NERDTreeQuitOnOpen = 1', b'', b'" Show the bookmarks table on startup', b'let g:NERDTreeShowBookmarks=1', b'', b'" Close vim if NERDTree is the only opened window', b'autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif', b'', b'" vim-devions configuration', b'let g:webdevicons_enable_nerdtree = 1', b'let g:WebDevIconsUnicodeDecorateFolderNodes = 1', b"let g:WebDevIconsOS = 'Darwin'", b'', b'', b'" Don\'t display these kinds of files', b'" let NERDTreeIgnore=[ \'\\.obj$\', \'\\.bak$\']', b'', b'', b'"-----------------------------------------------------------------------------', b'" CtrlP Settings', b'"-----------------------------------------------------------------------------', b"let g:ctrlp_working_path_mode = 'ra'", b'" jump to file if already open instead of opening a new instance', b"let g:ctrlp_switch_buffer = 'Et'", b'let g:ctrlp_mruf_max=450    " number of recently opened files', b'let g:ctrlp_max_files=0     " do not limit the number of searchable files', b'let g:ctrlp_use_caching = 1', b'let g:ctrlp_clear_cache_on_exit = 0', b"let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'", b"let g:ctrlp_match_window = 'bottom,order:btt,max:10,results:10'", b"let g:ctrlp_buftag_types = {'go' : '--language-force=go --golang-types=ftv'}", b'', b'map <Leader>fw :CtrlPBuffer<cr>', b'" file current dir', b'map <Leader>ff :CtrlP .<cr>', b'" file root', b'map <Leader>fr :CtrlP<cr>', b'" files, buffers, and MRU', b'map <Leader>fm :CtrlPMixed<cr>', b'', b'" enable vim-devicons', b'let g:webdevicons_enable_ctrlp = 1', b'', b'', b'"-----------------------------------------------------------------------------', b'" UltiSnips', b'"-----------------------------------------------------------------------------', b"let g:UltiSnipsListSnippets = '<F9>'", b'', b'function! g:UltiSnips_Complete()', b'  call UltiSnips#ExpandSnippet()', b'  if g:ulti_expand_res == 0', b'    if pumvisible()', b'      return "\\<C-n>"', b'    else', b'      call UltiSnips#JumpForwards()', b'      if g:ulti_jump_forwards_res == 0', b'        return "\\<TAB>"', b'      endif', b'    endif', b'  endif', b'  return ""', b'endfunction', b'', b'function! g:UltiSnips_Reverse()', b'  call UltiSnips#JumpBackwards()', b'  if g:ulti_jump_backwards_res == 0', b'    return "\\<C-P>"', b'  endif', b'', b'  return ""', b'endfunction', b'', b'', b'if !exists("g:UltiSnipsJumpForwardTrigger")', b'  let g:UltiSnipsJumpForwardTrigger = "<tab>"', b'endif', b'', b'if !exists("g:UltiSnipsJumpBackwardTrigger")', b'  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"', b'endif', b'', b'au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"', b'au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"', b'', b'', b'"-----------------------------------------------------------------------------', b'" Tagbar settings', b'"-----------------------------------------------------------------------------', b'nmap <F8> :TagbarToggle<CR>', b'let g:tagbar_autofocus = 1', b'" disabled - slow - enable tagbar in vim-airline status bar when needed', b'let g:airline#extensions#tagbar#enabled = 0', b'" go', b'let g:tagbar_type_go = {', b"    \\ 'ctagstype' : 'go',", b"    \\ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',", b"        \\ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',", b"        \\ 'r:constructor', 'f:functions' ],", b"    \\ 'sro' : '.',", b"    \\ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },", b"    \\ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },", b"    \\ 'ctagsbin'  : 'gotags',", b"    \\ 'ctagsargs' : '-sort -silent'", b'    \\ }', b'', b'', b'', b'"-----------------------------------------------------------------------------', b'" vim-go settings', b'"-----------------------------------------------------------------------------', b'let g:go_fmt_fail_silently = 0', b'" use goimports for formatting', b'let g:go_fmt_command = "goimports"', b'" use quickfix for all errors', b'let g:go_list_type = "quickfix"', b'" highlight same variable,function or struct.', b'let g:go_auto_sameids = 1', b'" don\'t use the default guru command for defs', b"let g:go_def_mode = 'godef'", b'" disable automatically show type info', b'let g:go_auto_type_info = 1', b'let g:go_def_mode = "guru"', b'let g:go_echo_command_info = 1', b'let g:go_gocode_autobuild = 0', b'let g:go_gocode_unimported_packages = 1', b'let g:go_autodetect_gopath = 1', b'let g:go_info_mode = "guru"', b'let g:go_term_mode = "split"', b'', b'', b'" highlight in vim-go', b'let g:go_highlight_array_whitespace_error = 0', b'let g:go_highlight_build_constraints = 1', b'let g:go_highlight_extra_types = 0', b'let g:go_highlight_fields = 1', b'let g:go_highlight_functions = 1', b'let g:go_highlight_methods = 1', b'let g:go_highlight_operators = 1', b'let g:go_highlight_space_tab_error = 0', b'let g:go_highlight_structs = 1', b'let g:go_highlight_trailing_whitespace_error = 0', b'let g:go_highlight_types = 1', b'', b"let g:go_modifytags_transform = 'snake_case'", b'', b'" run :GoBuild or :GoTestCompile based on the go file', b'function! s:build_go_files()', b"  let l:file = expand('%')", b"  if l:file =~# '^\\f\\+_test\\.go$'", b'    call go#test#Test(0, 1)', b"  elseif l:file =~# '^\\f\\+\\.go$'", b'    call go#cmd#Build(0)', b'  endif', b'endfunction', b'', b'"au FileType go nmap <Leader>gb <Plug>(go-build)', b'autocmd FileType go nmap <silent> <Leader>gb :<C-u>call <SID>build_go_files()<CR>', b'', b'" gometalinter configuration', b'let g:go_metalinter_command = ""', b'let g:go_metalinter_deadline = "5s"', b'let g:go_metalinter_enabled = [', b"    \\ 'deadcode',", b"    \\ 'errcheck',", b"    \\ 'gas',", b"    \\ 'goconst',", b"    \\ 'gocyclo',", b"    \\ 'golint',", b"    \\ 'gosimple',", b"    \\ 'ineffassign',", b"    \\ 'vet',", b"    \\ 'vetshadow'", b'\\]', b'', b'au FileType go nmap <Leader>gr <Plug>(go-run)', b'au FileType go nmap <Leader>gt <Plug>(go-test)', b'au FileType go nmap <Leader>gc <Plug>(go-coverage-toggle)', b'au FileType go nmap <Leader>gd <Plug>(go-doc)', b'au FileType go nmap <Leader>gw <Plug>(go-doc-browser)', b'au FileType go nmap <Leader>gs <Plug>(go-implements)', b'au FileType go nmap <Leader>gi <Plug>(go-info)', b'au FileType go nmap <Leader>ge <Plug>(go-rename)', b'au FileType go nmap <Leader>ga <Plug>(go-alternate-edit)', b'au FileType go nmap <F1> :GoDoc<cr>', b'au FileType go nmap <F5> :GoCoverageToggle -short<cr>', b'au FileType go nmap <F6> :GoAlternate <cr>', b'', b'', b'" create a go doc comment based on the word under the cursor', b'function! s:create_go_doc_comment()', b'  norm "zyiw', b'  execute ":put! z"', b'  execute ":norm I// \\<Esc>$"', b'endfunction', b'au FileType go nmap <silent> <Leader>go :<C-u>call <SID>create_go_doc_comment()<CR>', b'', b'"-----------------------------------------------------------------------------', b'" deoplete settings', b'"-----------------------------------------------------------------------------', b'set runtimepath+=$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'let g:deoplete#enable_at_startup = 1', b'', b'"-----------------------------------------------------------------------------', b'" deoplete-go settings', b'"-----------------------------------------------------------------------------', b'" Enable completing of go pointers', b'let g:deoplete#sources#go#pointer = 1', b'', b'"-----------------------------------------------------------------------------', b'" vim-delve settings', b'"-----------------------------------------------------------------------------', b'" Set the Delve backend.', b'let g:delve_backend = "native"', b'', b'"-----------------------------------------------------------------------------', b'" vim-markdown settings', b'"-----------------------------------------------------------------------------', b'" Disable folding', b'let g:vim_markdown_folding_disabled = 1', b'', b'" Auto shrink the TOC, so that it won\'t take up 50% of the screen', b'let g:vim_markdown_toc_autofit = 1', b'', b'"-----------------------------------------------------------------------------', b'" Undotree settings', b'"-----------------------------------------------------------------------------', b'nnoremap <F4> :UndotreeToggle<CR>', b'', b'"-----------------------------------------------------------------------------', b'" delimitMate settings', b'"-----------------------------------------------------------------------------', b'let g:delimitMate_expand_cr = 1', b'let g:delimitMate_expand_space = 1', b'let g:delimitMate_smart_quotes = 1', b'let g:delimitMate_expand_inside_quotes = 0', b"let g:delimitMate_smart_matchpairs = '^\\%(\\w\\|\\$\\)'", b'', b'', b'"-----------------------------------------------------------------------------', b'" Vitality settings', b'"-----------------------------------------------------------------------------', b'let g:vitality_fix_cursor = 1', b'let g:vitality_fix_focus = 0', b'let g:vitality_always_assume_iterm = 1', b'', b'', b'"-----------------------------------------------------------------------------', b'" Scratch settings', b'"-----------------------------------------------------------------------------', b'command! ScratchToggle call ScratchToggle()', b'', b'function! ScratchToggle()', b'    if exists("w:is_scratch_window")', b'        unlet w:is_scratch_window', b'        exec "q"', b'    else', b'        exec "normal! :Sscratch\\<cr>\\<C-W>L"', b'        let w:is_scratch_window = 1', b'    endif', b'endfunction', b'', b'nnoremap <Leader><TAB> :ScratchToggle<cr>', b'', b'', b'"-----------------------------------------------------------------------------', b'" Choosewin settings', b'"-----------------------------------------------------------------------------', b'nmap <F10> <Plug>(choosewin)', b'nmap <S-F10> <plug>(choosewin-swap)', b'let g:choosewin_overlay_enable=1', b'let g:choosewin_return_on_single_win=1  " return immediately when only 1 win', b'']
2018-01-06 22:10:10,649 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,652 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 9, 'nvim_call_function', ('exists', ['*neoinclude#include#get_tag_files'])]
2018-01-06 22:10:10,652 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\t\xb2nvim_call_function\x92\xa6exists\x91\xda\x00!*neoinclude#include#get_tag_files''
2018-01-06 22:10:10,652 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,652 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,652 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,653 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,653 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 9, None, 0]
2018-01-06 22:10:10,653 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, 0
2018-01-06 22:10:10,653 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,653 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 10, 'nvim_call_function', ('tagfiles', [])]
2018-01-06 22:10:10,653 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\n\xb2nvim_call_function\x92\xa8tagfiles\x90''
2018-01-06 22:10:10,653 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,653 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,653 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,654 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,654 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 10, None, []]
2018-01-06 22:10:10,654 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, []
2018-01-06 22:10:10,654 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,654 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 11, 'nvim_call_function', ('map', [[], 'fnamemodify(v:val, ":p")'])]
2018-01-06 22:10:10,654 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x0b\xb2nvim_call_function\x92\xa3map\x92\x90\xb8fnamemodify(v:val, ":p")''
2018-01-06 22:10:10,655 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,655 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,655 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,655 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,655 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 11, None, []]
2018-01-06 22:10:10,655 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, []
2018-01-06 22:10:10,655 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,655 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 12, 'nvim_set_var', ('deoplete#_initialized', True)]
2018-01-06 22:10:10,655 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x0c\xacnvim_set_var\x92\xb5deoplete#_initialized\xc3''
2018-01-06 22:10:10,655 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 12, None, None]
2018-01-06 22:10:10,656 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, None
2018-01-06 22:10:10,656 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 13, 'nvim_set_var', ('deoplete#_channel_id', 2)]
2018-01-06 22:10:10,656 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\r\xacnvim_set_var\x92\xb4deoplete#_channel_id\x02''
2018-01-06 22:10:10,656 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,656 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:10,657 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,657 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 13, None, None]
2018-01-06 22:10:10,657 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, None
2018-01-06 22:10:10,657 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:10,657 [DEBUG @ session.py:handler:207] 11751 - greenlet <greenlet.greenlet object at 0x7f563c0c6930> finished executing
2018-01-06 22:10:10,658 [DEBUG @ session.py:handler:212] 11751 - greenlet <greenlet.greenlet object at 0x7f563c0c6930> is now dying...
2018-01-06 22:10:10,658 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:10,658 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:32,211 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:32,212 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [2, b'deoplete_on_event', [{b'max_menu_width': 58, b'cwd': b'/home/vt/.vim', b'vars': {b'deoplete#sources#go#align_class': 0, b'deoplete#_initialized': True, b'deoplete#auto_complete_delay': 50, b'deoplete#max_abbr_width': 80, b'deoplete#enable_yarp': 0, b'deoplete#omni#input_patterns': {}, b'deoplete#auto_refresh_delay': 500, b'deoplete#sources#go#package_dot': 0, b'deoplete#omni_patterns': {}, b'deoplete#enable_refresh_always': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_logging': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#disable_auto_complete': 0, b'deoplete#enable_smart_case': 0, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#max_menu_width': 40, b'deoplete#sources#go#pointer': 1, b'deoplete#enable_ignore_case': 0, b'deoplete#complete_method': b'complete', b'deoplete#omni#functions': {}, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#_rank': {}, b'deoplete#enable_on_insert_enter': 1, b'deoplete#ignore_sources': {}, b'deoplete#max_list': 100, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#keyword_patterns': {}, b'deoplete#enable_camel_case': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#sources#go#on_event': 0, b'deoplete#sources': {}, b'deoplete#enable_profile': 0, b'deoplete#sources#go#use_cache': 0, b'deoplete#_context': {}, b'deoplete#_omni_patterns': {b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#skip_chars': [], b'deoplete#_channel_id': 2}, b'same_filetypes': [], b'smartcase': 0, b'runtimepath': b'/home/vt/.config/nvim,/home/vt/.config/nvim/plugged/deoplete.nvim/,/home/vt/.config/nvim/plugged/vim-rhubarb/,/home/vt/.config/nvim/plugged/tabular/,/home/vt/.config/nvim/plugged/splitjoin.vim/,/home/vt/.config/nvim/plugged/delimitMate/,/home/vt/.config/nvim/plugged/ultisnips/,/home/vt/.config/nvim/plugged/vim-gitgutter/,/home/vt/.config/nvim/plugged/vim-airline/,/home/vt/.config/nvim/plugged/ctrlp.vim/,/home/vt/.config/nvim/plugged/supertab/,/home/vt/.config/nvim/plugged/vim-go/,/home/vt/.config/nvim/plugged/tagbar/,/home/vt/.config/nvim/plugged/gocode/vim/,/home/vt/.config/nvim/plugged/vim-markdown/,/home/vt/.config/nvim/plugged/nerdtree/,/home/vt/.config/nvim/plugged/nerdtree-git-plugin/,/home/vt/.config/nvim/plugged/vim-delve/,/home/vt/.config/nvim/plugged/undotree/,/home/vt/.config/nvim/plugged/vitality.vim/,/home/vt/.config/nvim/plugged/vim-choosewin/,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/,/home/vt/.config/nvim/plugged/vim-exchange/,/home/vt/.config/nvim/plugged/vim-commentary/,/home/vt/.config/nvim/plugged/vim-dispatch/,/home/vt/.config/nvim/plugged/vim-fugitive/,/home/vt/.config/nvim/plugged/vim-surround/,/home/vt/.config/nvim/plugged/scratch.vim/,/home/vt/.config/nvim/plugged/deoplete-go/,/home/vt/.config/nvim/plugged/vim-devicons/,/etc/xdg/nvim,/home/vt/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/vt/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/vt/.config/nvim/after,/home/vt/.vim,/home/vt/.config/nvim/plugged/tabular/after,/home/vt/.config/nvim/plugged/ultisnips/after,/home/vt/.config/nvim/plugged/vim-markdown/after,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/after,/home/vt/.vim/after,$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'bufvars': {}, b'bufnr': 1, b'changedtick': -1, b'custom': {b'source': {b'_': {}}}, b'omni__omnifunc': b'', b'filetype': b'vim', b'input': b'', b'is_windows': False, b'delay': 50, b'bufsize': 22687, b'max_kind_width': 58, b'rpc': b'deoplete_on_event', b'bufpath': b'/home/vt/.vim/nvimrc', b'bufname': b'nvimrc', b'event': b'VimLeavePre', b'max_abbr_width': 58, b'sources': [], b'complete_str': b'', b'camelcase': 0, b'ignorecase': 0, b'filetypes': [b'vim'], b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf#]*', b'dict__dictionary': b'', b'position': [0, 682, 1, 0], b'next_input': b'  execute ":put! z"', b'encoding': b'utf-8'}]]
2018-01-06 22:10:32,212 [DEBUG @ async_session.py:_on_notification:102] 11751 - received notification: b'deoplete_on_event', [{b'max_menu_width': 58, b'cwd': b'/home/vt/.vim', b'vars': {b'deoplete#sources#go#align_class': 0, b'deoplete#_initialized': True, b'deoplete#auto_complete_delay': 50, b'deoplete#max_abbr_width': 80, b'deoplete#enable_yarp': 0, b'deoplete#omni#input_patterns': {}, b'deoplete#auto_refresh_delay': 500, b'deoplete#sources#go#package_dot': 0, b'deoplete#omni_patterns': {}, b'deoplete#enable_refresh_always': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_logging': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#disable_auto_complete': 0, b'deoplete#enable_smart_case': 0, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#max_menu_width': 40, b'deoplete#sources#go#pointer': 1, b'deoplete#enable_ignore_case': 0, b'deoplete#complete_method': b'complete', b'deoplete#omni#functions': {}, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#_rank': {}, b'deoplete#enable_on_insert_enter': 1, b'deoplete#ignore_sources': {}, b'deoplete#max_list': 100, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#keyword_patterns': {}, b'deoplete#enable_camel_case': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#sources#go#on_event': 0, b'deoplete#sources': {}, b'deoplete#enable_profile': 0, b'deoplete#sources#go#use_cache': 0, b'deoplete#_context': {}, b'deoplete#_omni_patterns': {b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#skip_chars': [], b'deoplete#_channel_id': 2}, b'same_filetypes': [], b'smartcase': 0, b'runtimepath': b'/home/vt/.config/nvim,/home/vt/.config/nvim/plugged/deoplete.nvim/,/home/vt/.config/nvim/plugged/vim-rhubarb/,/home/vt/.config/nvim/plugged/tabular/,/home/vt/.config/nvim/plugged/splitjoin.vim/,/home/vt/.config/nvim/plugged/delimitMate/,/home/vt/.config/nvim/plugged/ultisnips/,/home/vt/.config/nvim/plugged/vim-gitgutter/,/home/vt/.config/nvim/plugged/vim-airline/,/home/vt/.config/nvim/plugged/ctrlp.vim/,/home/vt/.config/nvim/plugged/supertab/,/home/vt/.config/nvim/plugged/vim-go/,/home/vt/.config/nvim/plugged/tagbar/,/home/vt/.config/nvim/plugged/gocode/vim/,/home/vt/.config/nvim/plugged/vim-markdown/,/home/vt/.config/nvim/plugged/nerdtree/,/home/vt/.config/nvim/plugged/nerdtree-git-plugin/,/home/vt/.config/nvim/plugged/vim-delve/,/home/vt/.config/nvim/plugged/undotree/,/home/vt/.config/nvim/plugged/vitality.vim/,/home/vt/.config/nvim/plugged/vim-choosewin/,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/,/home/vt/.config/nvim/plugged/vim-exchange/,/home/vt/.config/nvim/plugged/vim-commentary/,/home/vt/.config/nvim/plugged/vim-dispatch/,/home/vt/.config/nvim/plugged/vim-fugitive/,/home/vt/.config/nvim/plugged/vim-surround/,/home/vt/.config/nvim/plugged/scratch.vim/,/home/vt/.config/nvim/plugged/deoplete-go/,/home/vt/.config/nvim/plugged/vim-devicons/,/etc/xdg/nvim,/home/vt/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/vt/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/vt/.config/nvim/after,/home/vt/.vim,/home/vt/.config/nvim/plugged/tabular/after,/home/vt/.config/nvim/plugged/ultisnips/after,/home/vt/.config/nvim/plugged/vim-markdown/after,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/after,/home/vt/.vim/after,$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'bufvars': {}, b'bufnr': 1, b'changedtick': -1, b'custom': {b'source': {b'_': {}}}, b'omni__omnifunc': b'', b'filetype': b'vim', b'input': b'', b'is_windows': False, b'delay': 50, b'bufsize': 22687, b'max_kind_width': 58, b'rpc': b'deoplete_on_event', b'bufpath': b'/home/vt/.vim/nvimrc', b'bufname': b'nvimrc', b'event': b'VimLeavePre', b'max_abbr_width': 58, b'sources': [], b'complete_str': b'', b'camelcase': 0, b'ignorecase': 0, b'filetypes': [b'vim'], b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf#]*', b'dict__dictionary': b'', b'position': [0, 682, 1, 0], b'next_input': b'  execute ":put! z"', b'encoding': b'utf-8'}]
2018-01-06 22:10:32,212 [DEBUG @ session.py:_on_notification:215] 11751 - received rpc notification, greenlet <greenlet.greenlet object at 0x7f563c0c6930> will handle it
2018-01-06 22:10:32,212 [DEBUG @ host.py:_on_notification:106] 11751 - calling notification handler for "deoplete_on_event", args: "[{b'max_menu_width': 58, b'cwd': b'/home/vt/.vim', b'vars': {b'deoplete#sources#go#align_class': 0, b'deoplete#_initialized': True, b'deoplete#auto_complete_delay': 50, b'deoplete#max_abbr_width': 80, b'deoplete#enable_yarp': 0, b'deoplete#omni#input_patterns': {}, b'deoplete#auto_refresh_delay': 500, b'deoplete#sources#go#package_dot': 0, b'deoplete#omni_patterns': {}, b'deoplete#enable_refresh_always': 0, b'deoplete#_keyword_patterns': {b'_': b'[a-zA-Z_]\\k*'}, b'deoplete#_logging': {}, b'deoplete#auto_complete_start_length': 2, b'deoplete#disable_auto_complete': 0, b'deoplete#enable_smart_case': 0, b'deoplete#enable_at_startup': 1, b'deoplete#sources#go#gocode_binary': b'', b'deoplete#max_menu_width': 40, b'deoplete#sources#go#pointer': 1, b'deoplete#enable_ignore_case': 0, b'deoplete#complete_method': b'complete', b'deoplete#omni#functions': {}, b'deoplete#sources#go#cgo': 0, b'deoplete#sources#go#json_directory': b'', b'deoplete#_rank': {}, b'deoplete#enable_on_insert_enter': 1, b'deoplete#ignore_sources': {}, b'deoplete#max_list': 100, b'deoplete#member#prefix_patterns': {}, b'deoplete#delimiters': [b'/'], b'deoplete#keyword_patterns': {}, b'deoplete#enable_camel_case': 0, b'deoplete#sources#go#sort_class': [], b'deoplete#sources#go#on_event': 0, b'deoplete#sources': {}, b'deoplete#enable_profile': 0, b'deoplete#sources#go#use_cache': 0, b'deoplete#_context': {}, b'deoplete#_omni_patterns': {b'xhtml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'xml': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*'], b'html': [b'<', b'</', b'<[^>]*\\s[[:alnum:]-]*']}, b'deoplete#skip_chars': [], b'deoplete#_channel_id': 2}, b'same_filetypes': [], b'smartcase': 0, b'runtimepath': b'/home/vt/.config/nvim,/home/vt/.config/nvim/plugged/deoplete.nvim/,/home/vt/.config/nvim/plugged/vim-rhubarb/,/home/vt/.config/nvim/plugged/tabular/,/home/vt/.config/nvim/plugged/splitjoin.vim/,/home/vt/.config/nvim/plugged/delimitMate/,/home/vt/.config/nvim/plugged/ultisnips/,/home/vt/.config/nvim/plugged/vim-gitgutter/,/home/vt/.config/nvim/plugged/vim-airline/,/home/vt/.config/nvim/plugged/ctrlp.vim/,/home/vt/.config/nvim/plugged/supertab/,/home/vt/.config/nvim/plugged/vim-go/,/home/vt/.config/nvim/plugged/tagbar/,/home/vt/.config/nvim/plugged/gocode/vim/,/home/vt/.config/nvim/plugged/vim-markdown/,/home/vt/.config/nvim/plugged/nerdtree/,/home/vt/.config/nvim/plugged/nerdtree-git-plugin/,/home/vt/.config/nvim/plugged/vim-delve/,/home/vt/.config/nvim/plugged/undotree/,/home/vt/.config/nvim/plugged/vitality.vim/,/home/vt/.config/nvim/plugged/vim-choosewin/,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/,/home/vt/.config/nvim/plugged/vim-exchange/,/home/vt/.config/nvim/plugged/vim-commentary/,/home/vt/.config/nvim/plugged/vim-dispatch/,/home/vt/.config/nvim/plugged/vim-fugitive/,/home/vt/.config/nvim/plugged/vim-surround/,/home/vt/.config/nvim/plugged/scratch.vim/,/home/vt/.config/nvim/plugged/deoplete-go/,/home/vt/.config/nvim/plugged/vim-devicons/,/etc/xdg/nvim,/home/vt/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/share/nvim/runtime,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/vt/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/vt/.config/nvim/after,/home/vt/.vim,/home/vt/.config/nvim/plugged/tabular/after,/home/vt/.config/nvim/plugged/ultisnips/after,/home/vt/.config/nvim/plugged/vim-markdown/after,/home/vt/.config/nvim/plugged/vim-nerdtree-syntax-highlight/after,/home/vt/.vim/after,$XDG_CONFIG_HOME/nvim/plugged/deoplete.nvim', b'bufvars': {}, b'bufnr': 1, b'changedtick': -1, b'custom': {b'source': {b'_': {}}}, b'omni__omnifunc': b'', b'filetype': b'vim', b'input': b'', b'is_windows': False, b'delay': 50, b'bufsize': 22687, b'max_kind_width': 58, b'rpc': b'deoplete_on_event', b'bufpath': b'/home/vt/.vim/nvimrc', b'bufname': b'nvimrc', b'event': b'VimLeavePre', b'max_abbr_width': 58, b'sources': [], b'complete_str': b'', b'camelcase': 0, b'ignorecase': 0, b'filetypes': [b'vim'], b'keyword_patterns': b'[a-zA-Z_][a-zA-Z@0-9_\xc3\x80-\xc3\xbf#]*', b'dict__dictionary': b'', b'position': [0, 682, 1, 0], b'next_input': b'  execute ":put! z"', b'encoding': b'utf-8'}]"
2018-01-06 22:10:32,212 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 14, 'nvim_get_option', ('isfname',)]
2018-01-06 22:10:32,213 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x0e\xafnvim_get_option\x91\xa7isfname''
2018-01-06 22:10:32,213 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:32,213 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:32,213 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:32,224 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:32,225 [DEBUG @ msgpack_stream.py:_on_data:56] 11751 - received message: [1, 14, None, b'@,48-57,/,.,-,_,+,,,#,$,%,~,=']
2018-01-06 22:10:32,225 [DEBUG @ async_session.py:_on_response:95] 11751 - received response: None, b'@,48-57,/,.,-,_,+,,,#,$,%,~,='
2018-01-06 22:10:32,225 [DEBUG @ session.py:response_cb:148] 11751 - response is available for greenlet <greenlet.greenlet object at 0x7f563c0c6930>, switching back
2018-01-06 22:10:32,225 [DEBUG @ msgpack_stream.py:send:33] 11751 - sent [0, 15, 'nvim_call_function', ('deoplete#util#vimoption2python_not', ['@,48-57,/,.,-,_,+,,,#,$,%,~,='])]
2018-01-06 22:10:32,225 [DEBUG @ base.py:send:113] 11751 - Sending 'b'\x94\x00\x0f\xb2nvim_call_function\x92\xda\x00"deoplete#util#vimoption2python_not\x91\xbd@,48-57,/,.,-,_,+,,,#,$,%,~,=''
2018-01-06 22:10:32,225 [DEBUG @ session.py:_yielding_request:152] 11751 - yielding from greenlet <greenlet.greenlet object at 0x7f563c0c6930> to wait for response
2018-01-06 22:10:32,225 [DEBUG @ msgpack_stream.py:_on_data:54] 11751 - waiting for message...
2018-01-06 22:10:32,225 [DEBUG @ msgpack_stream.py:_on_data:59] 11751 - unpacker needs more data...
2018-01-06 22:10:32,225 [DEBUG @ base.py:_on_error:166] 11751 - 32
2018-01-06 22:10:32,225 [DEBUG @ base.py:stop:149] 11751 - Stopped event loop
2018-01-06 22:10:32,226 [DEBUG @ base.py:run:140] 11751 - Exited event loop
